#!/bin/bash
set -euo pipefail

# Couleurs
RED='\033[0;31m'    ; GREEN='\033[0;32m'
YELLOW='\033[0;33m' ; BLUE='\033[0;34m'
MAGENTA='\033[0;35m'; CYAN='\033[0;36m'
GOLD='\033[1;33m'   ; NC='\033[0m' # No Color

#### Banner ####
display_banner() {
    clear
    echo -e "${BLUE}"
    echo "  _____                       _ _           _____                  "
    echo " / ____|                     (_) |         / ____|                 "
    echo "| (___   ___  ___ _   _ _ __ _| |_ _   _ | (___   ___ __ _ _ __   "
    echo " \___ \ / _ \/ __| | | | '__| | __| | | | \___ \ / __/ _\` | '_ \  "
    echo " ____) |  __/ (__| |_| | |  | | |_| |_| | ____) | (_| (_| | | | | "
    echo "|_____/ \___|\___|\__,_|_|  |_|\__|\__, ||_____/ \___\__,_|_| |_| "
    echo "                                     __/ |                         "
    echo "                                    |___/                          "
    echo -e "${NC}"
    echo -e "${YELLOW}Automated Security Audit Script${NC}"
    echo -e "${CYAN}------------------------------------------${NC}"
    echo -e "${GREEN}Developed by mpgamer75 (optimized)${NC}"
    echo -e "${GOLD}Version 1.2.1${NC}"
    echo -e "${RED}==========================================${NC}"
}

#### Tool check ####
check_required_tools() {
    local missing=()
    for t in nmap masscan dirb nikto gobuster sqlmap nuclei whatweb hydra; do
        if ! command -v "$t" &>/dev/null; then
            missing+=("$t")
        fi
    done
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}[ERROR] Missing tools: ${missing[*]}.${NC}"
        echo -e "${BLUE}Install them e.g.: sudo apt install ${missing[*]}${NC}"
        exit 1
    fi
}

#### Prepare output ####
prepare_output() {
    OUTDIR="scan_$(date +'%Y%m%d_%H%M%S')"
    mkdir -p "$OUTDIR"
    echo -e "${GREEN}[INFO] Results in: $OUTDIR${NC}"
}

#### Scans ####
run_nmap() {
    echo -e "${CYAN}[SCAN] Nmap (fast)...${NC}"
    nmap -n -T4 -F "$TARGET" -oN "$OUTDIR/nmap_fast.txt" &
    echo -e "${CYAN}[SCAN] Nmap (full)...${NC}"
    nmap -n -T4 -p- -sS -sV -A "$TARGET" -oN "$OUTDIR/nmap_full.txt" &
}

run_masscan() {
    echo -e "${CYAN}[SCAN] Masscan...${NC}"
    masscan "$TARGET" -p1-65535 --rate=10000 -oL "$OUTDIR/masscan.txt" &
}

run_whatweb() {
    [ -z "${URL:-}" ] && return
    echo -e "${CYAN}[SCAN] WhatWeb...${NC}"
    whatweb "$URL" -v > "$OUTDIR/whatweb.txt" &
}

run_web_scans() {
    [ -z "${URL:-}" ] && return
    echo -e "${CYAN}[SCAN] Dirb...${NC}"
    dirb "$URL" -o "$OUTDIR/dirb.txt" &
    echo -e "${CYAN}[SCAN] Gobuster...${NC}"
    gobuster dir -u "$URL" -w /usr/share/wordlists/dirb/common.txt -t 50 -o "$OUTDIR/gobuster.txt" &
    echo -e "${CYAN}[SCAN] Nikto...${NC}"
    nikto -h "$URL" -o "$OUTDIR/nikto.txt" &
    echo -e "${CYAN}[SCAN] SQLMap...${NC}"
    sqlmap -u "$URL" --batch --level=2 --risk=1 --output-dir="$OUTDIR/sqlmap" &
    echo -e "${CYAN}[SCAN] Nuclei...${NC}"
    nuclei -u "$URL" -o "$OUTDIR/nuclei.txt" &
}

#### Post-scan: SSH brute ####
ssh_brute_if_applicable() {
    wait  # ensure nmap_full is done
    if grep -qE "22/tcp.*open" "$OUTDIR/nmap_full.txt"; then
        echo -e "${YELLOW}[WARN] SSH port detected open.${NC}"
        read -rp "Run SSH brute-force with Hydra? (y/N): " ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            read -rp "Username list file [users.txt]: " ULIST; ULIST=${ULIST:-users.txt}
            read -rp "Password list file [passwords.txt]: " PLIST; PLIST=${PLIST:-passwords.txt}
            echo -e "${CYAN}[SCAN] Hydra SSH brute-force...${NC}"
            hydra -L "$ULIST" -P "$PLIST" -t 16 ssh://"$TARGET" -o "$OUTDIR/hydra_ssh.txt"
        fi
    fi
}

#### Summary generation ####
generate_summary() {
    local txt="$OUTDIR/summary.txt"
    {
      echo "=========================="
      echo "  SECURITY SCAN SUMMARY"
      echo "=========================="
      echo
      echo "TARGET: $TARGET"
      [[ -n "${URL:-}" ]] && echo "URL   : $URL"
      echo "DATE  : $(date)"
      echo "DIR   : $OUTDIR"
      echo
      echo "---- Files ----"
      for f in nmap_fast.txt nmap_full.txt masscan.txt whatweb.txt dirb.txt gobuster.txt nikto.txt nuclei.txt sqlmap hydra_ssh.txt; do
        if [ -e "$OUTDIR/$f" ]; then
          echo "- $f"
        fi
      done
      echo
      echo "Scan complete. Review individual files for details."
    } > "$txt"
    echo -e "${GREEN}[INFO] Summary saved to: $txt${NC}"
}

generate_summary_json() {
    local json="$OUTDIR/summary.json"
    {
      echo "{"
      echo "  \"target\": \"$TARGET\","
      [[ -n "${URL:-}" ]] && echo "  \"url\": \"$URL\","
      echo "  \"date\": \"$(date)\","
      echo "  \"output_dir\": \"$OUTDIR\","
      echo "  \"results\": ["
      local first=true
      for f in nmap_fast.txt nmap_full.txt masscan.txt whatweb.txt dirb.txt gobuster.txt nikto.txt nuclei.txt sqlmap hydra_ssh.txt; do
        if [ -e "$OUTDIR/$f" ]; then
          if [ "$first" = true ]; then first=false; else echo "    ,"; fi
          echo -n "    { \"file\": \"$f\" }"
        fi
      done
      echo
      echo "  ]"
      echo "}"
    } > "$json"
    echo -e "${GREEN}[INFO] JSON summary saved to: $json${NC}"
}

#### Save to Documents ####
ask_and_save() {
    echo
    echo -e "${BLUE}Would you like to save/copy results to ~/Documents?${NC}"
    echo "1) Copy entire results folder"
    echo "2) Copy only summary"
    echo "3) Skip saving"
    read -rp "Choice [1]: " choice; choice=${choice:-1}

    case $choice in
      1)
        cp -r "$OUTDIR" "$HOME/Documents/"
        echo -e "${GREEN}Copied folder to ~/Documents/$OUTDIR${NC}"
        ;;
      2)
        echo "Choose format: 1) txt  2) json"
        read -rp "Format [1]: " fmt; fmt=${fmt:-1}
        if [ "$fmt" -eq 2 ]; then
          generate_summary_json
          cp "$OUTDIR/summary.json" "$HOME/Documents/"
          echo -e "${GREEN}Copied summary.json to ~/Documents/${NC}"
        else
          cp "$OUTDIR/summary.txt" "$HOME/Documents/"
          echo -e "${GREEN}Copied summary.txt to ~/Documents/${NC}"
        fi
        ;;
      *)
        echo -e "${YELLOW}Results remain in: $OUTDIR${NC}"
        ;;
    esac
}

#### Help ####
show_help() {
    cat <<EOF
Usage: $0 -t <target-IP> [-u <target-URL>]

  -t IP    Target IP address (required)
  -u URL   Target URL for web scans (optional)
  -h       Show help

Example:
  $0 -t 10.0.0.5 -u https://example.com
EOF
    exit 0
}

##### Main #####
display_banner

# Parse args
if [ $# -eq 0 ]; then show_help; fi
while getopts ":t:u:h" opt; do
  case $opt in
    t) TARGET=$OPTARG ;;
    u) URL=$OPTARG    ;;
    h) show_help      ;;
    *) show_help      ;;
  esac
done
[ -z "${TARGET:-}" ] && { echo -e "${RED}[ERROR] Missing target IP.${NC}"; show_help; }

check_required_tools
prepare_output

# Launch scans
run_nmap
run_masscan
run_whatweb
run_web_scans

# Wait for all background jobs
wait

# Conditional SSH brute
ssh_brute_if_applicable

# Final summary
generate_summary

# Ask to save/copy
ask_and_save

echo -e "${GREEN}[DONE] All done.${NC}"
