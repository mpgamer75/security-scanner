#!/bin/bash
set -euo pipefail

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'

VERSION="2.0.0"

display_banner() {
    clear
    echo -e "${RED}"
    cat << "EOF"
    ███████╗███████╗ ██████╗██╗   ██╗██████╗ ██╗████████╗██╗   ██╗
    ██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██║╚══██╔══╝╚██╗ ██╔╝
    ███████╗█████╗  ██║     ██║   ██║██████╔╝██║   ██║    ╚████╔╝ 
    ╚════██║██╔══╝  ██║     ██║   ██║██╔══██╗██║   ██║     ╚██╔╝  
    ███████║███████╗╚██████╗╚██████╔╝██║  ██║██║   ██║      ██║   
    ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝      ╚═╝   
                                                                   
    ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗ 
    ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
    ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
    ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
    ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
EOF
    echo -e "${NC}"
    echo -e "${GRAY}════════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}                 Advanced Security Assessment Tool${NC}"
    echo -e "${CYAN}                      Version ${VERSION} | by mpgamer75${NC}"
    echo -e "${GRAY}════════════════════════════════════════════════════════════════${NC}"
}

show_help() {
    cat << "EOF"

USAGE:
    security [OPTIONS]

OPTIONS:
    -h, --help      Show this help message
    -v, --version   Show version information

SCAN TYPES:
    1. OSINT & Information Gathering
       - WHOIS lookups and domain information
       - DNS enumeration (A, MX, NS, TXT records)
       - Email harvesting and social media intelligence
       - Historical data and archived information

    2. Domain & Certificate Analysis
       - SSL/TLS certificate analysis
       - Subdomain discovery and enumeration
       - Domain reputation and security analysis
       - Certificate transparency logs

    3. Network Port Scanning
       - TCP port scanning (fast and comprehensive)
       - UDP port scanning for critical services
       - Service version detection
       - OS fingerprinting and detection

    4. Complete Assessment
       - Full combination of all scan types
       - Comprehensive security evaluation
       - Detailed reporting and analysis

TOOLS USED:
    OSINT: whois, theharvester, dnsenum, dnsrecon
    Domains: subfinder, amass, assetfinder, findomain
    Certificates: openssl, sslscan, sslyze
    Network: nmap, masscan, unicornscan, zmap
    Web: whatweb, wafw00f, nikto, gobuster, dirb
    Vulnerabilities: nuclei, sqlmap, xssstrike

EXAMPLES:
    security                    # Interactive mode
    security --help            # Show this help

NOTES:
    - All scans are saved in timestamped directories
    - Use only on systems you own or have permission to test
    - Some scans require internet connectivity
    - Advanced scans may take significant time

EOF
}

# Tableau associatif pour suivre les processus
declare -A running_processes
declare -A completed_processes

install_missing_tool() {
    local tool="$1"
    echo -e "${YELLOW}[INSTALL]${NC} Installing $tool..."
    
    case "$tool" in
        "subfinder")
            if command -v go &> /dev/null; then
                go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
            else
                echo -e "${RED}[ERROR]${NC} Go is required to install $tool"
                return 1
            fi
            ;;
        "nuclei")
            if command -v go &> /dev/null; then
                go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
            else
                echo -e "${RED}[ERROR]${NC} Go is required to install $tool"
                return 1
            fi
            ;;
        "amass")
            if command -v go &> /dev/null; then
                go install -v github.com/OWASP/Amass/v3/...@master
            else
                echo -e "${RED}[ERROR]${NC} Go is required to install $tool"
                return 1
            fi
            ;;
        *)
            if command -v apt &> /dev/null; then
                sudo apt update && sudo apt install -y "$tool"
            elif command -v yum &> /dev/null; then
                sudo yum install -y "$tool"
            elif command -v pacman &> /dev/null; then
                sudo pacman -S --noconfirm "$tool"
            else
                echo -e "${RED}[ERROR]${NC} Cannot install $tool automatically"
                return 1
            fi
            ;;
    esac
    
    if command -v "$tool" &> /dev/null; then
        echo -e "${GREEN}[SUCCESS]${NC} $tool installed successfully"
        return 0
    else
        echo -e "${RED}[ERROR]${NC} Failed to install $tool"
        return 1
    fi
}

check_and_install_tools() {
    local scan_type="$1"
    local tools_needed=()
    
    case "$scan_type" in
        "osint")
            tools_needed=(whois theharvester dig dnsenum dnsrecon)
            ;;
        "domain")
            tools_needed=(subfinder amass assetfinder openssl sslscan)
            ;;
        "network")
            tools_needed=(nmap masscan unicornscan)
            ;;
        "complete")
            tools_needed=(whois theharvester dig dnsenum dnsrecon subfinder amass assetfinder openssl sslscan nmap masscan unicornscan whatweb wafw00f nikto gobuster dirb nuclei sqlmap)
            ;;
    esac
    
    local missing=()
    echo -e "${CYAN}[INFO]${NC} Checking required tools for $scan_type scan..."
    
    for tool in "${tools_needed[@]}"; do
        if ! command -v "$tool" &>/dev/null; then
            missing+=("$tool")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${YELLOW}[WARNING]${NC} Missing tools: ${missing[*]}"
        read -rp "Install missing tools automatically? [Y/n]: " install_choice
        
        if [[ ! "$install_choice" =~ ^[Nn] ]]; then
            for tool in "${missing[@]}"; do
                install_missing_tool "$tool"
            done
        else
            echo -e "${RED}[ERROR]${NC} Cannot proceed without required tools"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}[OK]${NC} All required tools are available"
}

prepare_output() {
    OUTDIR="security_scan_$(date +'%Y%m%d_%H%M%S')"
    mkdir -p "$OUTDIR"/{osint,domains,network,web,reports}
    echo -e "${GREEN}[INFO]${NC} Results directory: ${WHITE}$OUTDIR${NC}"
}

start_process() {
    local name="$1"
    local command="$2"
    
    echo -e "${CYAN}[START]${NC} $name"
    eval "$command" &
    local pid=$!
    running_processes["$name"]=$pid
}

monitor_processes() {
    local total_processes=${#running_processes[@]}
    local completed=0
    
    while [ ${#running_processes[@]} -gt 0 ]; do
        for name in "${!running_processes[@]}"; do
            local pid=${running_processes[$name]}
            if ! kill -0 $pid 2>/dev/null; then
                echo -e "${GREEN}[DONE]${NC} $name"
                completed_processes["$name"]=$pid
                unset running_processes["$name"]
                ((completed++))
            fi
        done
        
        # Affichage du progrès si plus de 3 processus
        if [ $total_processes -gt 3 ]; then
            local remaining=${#running_processes[@]}
            echo -e "${CYAN}[PROGRESS]${NC} $completed/$total_processes completed, $remaining running..."
        fi
        
        sleep 2
    done
}

show_scan_menu() {
    echo -e "\n${YELLOW}Select scan type:${NC}"
    echo -e "${CYAN}1)${NC} OSINT & Information Gathering"
    echo -e "${CYAN}2)${NC} Domain & Certificate Analysis" 
    echo -e "${CYAN}3)${NC} Network Port Scanning"
    echo -e "${CYAN}4)${NC} Complete Assessment (All scans)"
    echo
}

# OSINT Functions
run_osint_scans() {
    local target="$1"
    local domain="$2"
    
    echo -e "\n${RED}[OSINT]${NC} Starting information gathering..."
    
    if [ -n "$domain" ]; then
        start_process "WHOIS Lookup" "whois '$domain' > '$OUTDIR/osint/whois.txt' 2>/dev/null"
        
        start_process "DNS Enumeration" "{
            echo '=== A Records ===' > '$OUTDIR/osint/dns_enum.txt'
            dig +short '$domain' A >> '$OUTDIR/osint/dns_enum.txt'
            echo -e '\n=== MX Records ===' >> '$OUTDIR/osint/dns_enum.txt'
            dig +short '$domain' MX >> '$OUTDIR/osint/dns_enum.txt'
            echo -e '\n=== NS Records ===' >> '$OUTDIR/osint/dns_enum.txt'
            dig +short '$domain' NS >> '$OUTDIR/osint/dns_enum.txt'
            echo -e '\n=== TXT Records ===' >> '$OUTDIR/osint/dns_enum.txt'
            dig +short '$domain' TXT >> '$OUTDIR/osint/dns_enum.txt'
        }"
        
        start_process "DNS Enumeration (Advanced)" "dnsenum '$domain' > '$OUTDIR/osint/dnsenum.txt' 2>/dev/null"
        
        start_process "DNS Reconnaissance" "dnsrecon -d '$domain' -t std > '$OUTDIR/osint/dnsrecon.txt' 2>/dev/null"
        
        start_process "Email Harvesting" "theharvester -d '$domain' -l 100 -b google,bing,yahoo > '$OUTDIR/osint/emails.txt' 2>/dev/null"
    fi
    
    if [ -n "$target" ]; then
        start_process "Reverse DNS" "dig +short -x '$target' > '$OUTDIR/osint/reverse_dns.txt' 2>/dev/null"
    fi
    
    monitor_processes
    echo -e "${GREEN}[COMPLETED]${NC} OSINT scans finished"
}

# Domain Functions
run_domain_scans() {
    local domain="$1"
    local url="$2"
    
    echo -e "\n${RED}[DOMAINS]${NC} Starting domain and certificate analysis..."
    
    if [ -n "$domain" ]; then
        start_process "Subfinder Discovery" "timeout 300 subfinder -d '$domain' -silent -o '$OUTDIR/domains/subdomains_subfinder.txt'"
        
        start_process "Amass Enumeration" "timeout 600 amass enum -passive -d '$domain' -o '$OUTDIR/domains/subdomains_amass.txt' 2>/dev/null"
        
        start_process "Assetfinder Discovery" "timeout 300 assetfinder '$domain' > '$OUTDIR/domains/subdomains_assetfinder.txt' 2>/dev/null"
        
        start_process "SSL Certificate Analysis" "timeout 30 sh -c \"echo | openssl s_client -connect '$domain:443' -servername '$domain' 2>/dev/null | openssl x509 -text > '$OUTDIR/domains/ssl_cert.txt' 2>/dev/null\""
        
        start_process "SSL Configuration Scan" "timeout 300 sslscan '$domain' > '$OUTDIR/domains/sslscan.txt' 2>/dev/null"
    fi
    
    if [ -n "$url" ]; then
        start_process "Technology Detection" "timeout 300 whatweb '$url' -v > '$OUTDIR/domains/whatweb.txt' 2>/dev/null"
        
        start_process "WAF Detection" "timeout 60 wafw00f '$url' > '$OUTDIR/domains/wafw00f.txt' 2>/dev/null"
    fi
    
    monitor_processes
    
    # Consolider les sous-domaines
    if [ -f "$OUTDIR/domains/subdomains_subfinder.txt" ] || [ -f "$OUTDIR/domains/subdomains_amass.txt" ] || [ -f "$OUTDIR/domains/subdomains_assetfinder.txt" ]; then
        echo -e "${CYAN}[INFO]${NC} Consolidating subdomain results..."
        cat "$OUTDIR/domains"/subdomains_*.txt 2>/dev/null | sort -u > "$OUTDIR/domains/all_subdomains.txt"
    fi
    
    echo -e "${GREEN}[COMPLETED]${NC} Domain scans finished"
}

# Network Functions
run_network_scans() {
    local target="$1"
    
    echo -e "\n${RED}[NETWORK]${NC} Starting network port scanning..."
    
    start_process "Nmap Fast Scan" "nmap -n -T5 --top-ports 1000 --min-rate=5000 '$target' -oN '$OUTDIR/network/nmap_fast.txt'"
    
    start_process "Nmap Full TCP Scan" "nmap -n -T4 -p- -sS -sV -sC -A --script=vuln '$target' -oN '$OUTDIR/network/nmap_full.txt'"
    
    start_process "Nmap UDP Scan" "nmap -n -T4 --top-ports 100 -sU '$target' -oN '$OUTDIR/network/nmap_udp.txt'"
    
    start_process "Masscan Ultra-Fast" "masscan '$target' -p1-65535 --rate=50000 -oL '$OUTDIR/network/masscan.txt' 2>/dev/null"
    
    start_process "Unicornscan TCP" "unicornscan -mT '$target':1-65535 > '$OUTDIR/network/unicornscan_tcp.txt' 2>/dev/null"
    
    start_process "OS Fingerprinting" "nmap -n -O '$target' -oN '$OUTDIR/network/nmap_os.txt' 2>/dev/null"
    
    monitor_processes
    echo -e "${GREEN}[COMPLETED]${NC} Network scans finished"
}

# Web Functions
run_web_scans() {
    local url="$1"
    
    echo -e "\n${RED}[WEB]${NC} Starting web application testing..."
    
    start_process "Directory Enumeration (Common)" "gobuster dir -u '$url' -w /usr/share/wordlists/dirb/common.txt -t 50 -x php,html,txt,js -o '$OUTDIR/web/gobuster_common.txt' 2>/dev/null"
    
    start_process "Directory Enumeration (Big)" "gobuster dir -u '$url' -w /usr/share/wordlists/dirb/big.txt -t 30 -x php,html,txt -o '$OUTDIR/web/gobuster_big.txt' 2>/dev/null"
    
    start_process "Dirb Enumeration" "dirb '$url' -o '$OUTDIR/web/dirb.txt' 2>/dev/null"
    
    start_process "Nikto Vulnerability Scan" "nikto -h '$url' -o '$OUTDIR/web/nikto.txt'"
    
    start_process "Nuclei Templates" "nuclei -u '$url' -t /root/nuclei-templates/ -o '$OUTDIR/web/nuclei.txt' 2>/dev/null"
    
    start_process "SQL Injection Testing" "sqlmap -u '$url' --batch --level=2 --risk=1 --output-dir='$OUTDIR/web/sqlmap' 2>/dev/null"
    
    monitor_processes
    echo -e "${GREEN}[COMPLETED]${NC} Web scans finished"
}

generate_clean_report() {
    local report_file="$OUTDIR/reports/executive_summary.txt"
    
    {
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                            SECURITY ASSESSMENT REPORT                       ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo
        echo "┌─ TARGET INFORMATION ─────────────────────────────────────────────────────────┐"
        echo "│  IP Address: $TARGET"
        [ -n "$URL" ] && echo "│  URL: $URL"
        [ -n "$DOMAIN" ] && echo "│  Domain: $DOMAIN"
        echo "│  Scan Date: $(date)"
        echo "│  Tool Version: Security Scanner $VERSION"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        echo "┌─ SCAN RESULTS DIRECTORY ─────────────────────────────────────────────────────┐"
        echo "│  Location: $OUTDIR"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        # Analyse des résultats OSINT
        if [ -d "$OUTDIR/osint" ] && [ "$(ls -A "$OUTDIR/osint" 2>/dev/null)" ]; then
            echo "┌─ OSINT & INFORMATION GATHERING ──────────────────────────────────────────────┐"
            for f in "$OUTDIR/osint"/*; do
                if [ -f "$f" ]; then
                    local filename=$(basename "$f")
                    local filesize=$(stat -f%z "$f" 2>/dev/null || stat -c%s "$f" 2>/dev/null || echo "0")
                    printf "│  %-30s [%s bytes]\n" "$filename" "$filesize"
                fi
            done
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        # Analyse des résultats de domaines
        if [ -d "$OUTDIR/domains" ] && [ "$(ls -A "$OUTDIR/domains" 2>/dev/null)" ]; then
            echo "┌─ DOMAIN & CERTIFICATE ANALYSIS ──────────────────────────────────────────────┐"
            for f in "$OUTDIR/domains"/*; do
                if [ -f "$f" ]; then
                    local filename=$(basename "$f")
                    local filesize=$(stat -f%z "$f" 2>/dev/null || stat -c%s "$f" 2>/dev/null || echo "0")
                    printf "│  %-30s [%s bytes]\n" "$filename" "$filesize"
                fi
            done
            
            # Compter les sous-domaines trouvés
            if [ -f "$OUTDIR/domains/all_subdomains.txt" ]; then
                local subdomain_count=$(wc -l < "$OUTDIR/domains/all_subdomains.txt" 2>/dev/null || echo "0")
                echo "│  Total subdomains discovered: $subdomain_count"
            fi
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        # Analyse des résultats réseau
        if [ -d "$OUTDIR/network" ] && [ "$(ls -A "$OUTDIR/network" 2>/dev/null)" ]; then
            echo "┌─ NETWORK RECONNAISSANCE ──────────────────────────────────────────────────────┐"
            for f in "$OUTDIR/network"/*; do
                if [ -f "$f" ]; then
                    local filename=$(basename "$f")
                    local filesize=$(stat -f%z "$f" 2>/dev/null || stat -c%s "$f" 2>/dev/null || echo "0")
                    printf "│  %-30s [%s bytes]\n" "$filename" "$filesize"
                fi
            done
            
            # Analyser les ports ouverts
            if [ -f "$OUTDIR/network/nmap_fast.txt" ]; then
                local open_ports=$(grep -c "open" "$OUTDIR/network/nmap_fast.txt" 2>/dev/null || echo "0")
                echo "│  Open ports detected: $open_ports"
            fi
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        # Analyse des résultats web
        if [ -d "$OUTDIR/web" ] && [ "$(ls -A "$OUTDIR/web" 2>/dev/null)" ]; then
            echo "┌─ WEB APPLICATION TESTING ─────────────────────────────────────────────────────┐"
            for f in "$OUTDIR/web"/*; do
                if [ -f "$f" ]; then
                    local filename=$(basename "$f")
                    local filesize=$(stat -f%z "$f" 2>/dev/null || stat -c%s "$f" 2>/dev/null || echo "0")
                    printf "│  %-30s [%s bytes]\n" "$filename" "$filesize"
                elif [ -d "$f" ]; then
                    local dirname=$(basename "$f")
                    printf "│  %-30s [directory]\n" "$dirname"
                fi
            done
            
            # Analyser les répertoires trouvés
            if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
                local dirs_found=$(wc -l < "$OUTDIR/web/gobuster_common.txt" 2>/dev/null || echo "0")
                echo "│  Web directories found: $dirs_found"
            fi
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        echo "┌─ QUICK ANALYSIS ──────────────────────────────────────────────────────────────┐"
        
        # Résumé rapide des découvertes
        if [ -f "$OUTDIR/network/nmap_fast.txt" ]; then
            echo "│  Network Services:"
            grep "open" "$OUTDIR/network/nmap_fast.txt" 2>/dev/null | head -5 | while read line; do
                echo "│    - $line"
            done
        fi
        
        if [ -f "$OUTDIR/domains/all_subdomains.txt" ]; then
            echo "│  Key Subdomains:"
            head -5 "$OUTDIR/domains/all_subdomains.txt" 2>/dev/null | while read line; do
                echo "│    - $line"
            done
        fi
        
        if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
            echo "│  Important Directories:"
            head -5 "$OUTDIR/web/gobuster_common.txt" 2>/dev/null | while read line; do
                echo "│    - $line"
            done
        fi
        
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                    Report generated by Security Scanner v$VERSION                    ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        
    } > "$report_file"
    
    echo -e "${GREEN}[REPORT]${NC} Executive summary: ${WHITE}$report_file${NC}"
}

# Main execution
main() {
    # Parse arguments
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            echo "Security Scanner v$VERSION"
            exit 0
            ;;
    esac
    
    display_banner
    
    # Get target information
    echo -e "\n${YELLOW}Target Information:${NC}"
    read -rp "Enter target IP address: " TARGET
    [ -z "$TARGET" ] && { echo -e "${RED}[ERROR]${NC} No IP provided"; exit 1; }
    
    read -rp "Enter target URL (optional): " URL
    read -rp "Enter domain name (optional): " DOMAIN
    
    # Extract domain from URL if not provided
    if [ -n "$URL" ] && [ -z "$DOMAIN" ]; then
        DOMAIN=$(echo "$URL" | sed -E 's|https?://([^/]+).*|\1|')
    fi
    
    show_scan_menu
    read -rp "Select option [1-4]: " SCAN_CHOICE
    
    prepare_output
    
    case "$SCAN_CHOICE" in
        1)
            check_and_install_tools "osint"
            run_osint_scans "$TARGET" "$DOMAIN"
            ;;
        2)
            check_and_install_tools "domain"
            run_domain_scans "$DOMAIN" "$URL"
            ;;
        3)
            check_and_install_tools "network"
            run_network_scans "$TARGET"
            ;;
        4)
            check_and_install_tools "complete"
            run_osint_scans "$TARGET" "$DOMAIN"
            run_domain_scans "$DOMAIN" "$URL"
            run_network_scans "$TARGET"
            [ -n "$URL" ] && run_web_scans "$URL"
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Invalid selection"
            exit 1
            ;;
    esac
    
    generate_clean_report
    
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                              SCAN COMPLETED                                  ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo -e "${WHITE}Results saved in:${NC} ${CYAN}$OUTDIR${NC}"
    echo -e "${WHITE}Executive summary:${NC} ${CYAN}$OUTDIR/reports/executive_summary.txt${NC}"
    echo -e "\n${YELLOW}Thank you for using Security Scanner!${NC}"
}

# Execute main function
main "$@"