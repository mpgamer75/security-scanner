#!/bin/bash
set -euo pipefail

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
NC='\033[0m'

VERSION="2.1.0"

# Variables globales pour gestion interruption
SCAN_INTERRUPTED=false
CURRENT_SCAN=""

display_banner() {
    clear
    echo -e "${RED}"
    cat << "EOF"
    ███████╗███████╗ ██████╗██╗   ██╗██████╗ ██╗████████╗██╗   ██╗
    ██╔════╝██╔════╝██╔════╝██║   ██║██╔══██╗██║╚══██╔══╝╚██╗ ██╔╝
    ███████╗█████╗  ██║     ██║   ██║██████╔╝██║   ██║    ╚████╔╝ 
    ╚════██║██╔══╝  ██║     ██║   ██║██╔══██╗██║   ██║     ╚██╔╝  
    ███████║███████╗╚██████╗╚██████╔╝██║  ██║██║   ██║      ██║   
    ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝   ╚═╝      ╚═╝   
                                                                   
    ███████╗ ██████╗ █████╗ ███╗   ██╗███╗   ██╗███████╗██████╗ 
    ██╔════╝██╔════╝██╔══██╗████╗  ██║████╗  ██║██╔════╝██╔══██╗
    ███████╗██║     ███████║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝
    ╚════██║██║     ██╔══██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗
    ███████║╚██████╗██║  ██║██║ ╚████║██║ ╚████║███████╗██║  ██║
    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝
EOF
    echo -e "${NC}"
    echo -e "${GRAY}════════════════════════════════════════════════════════════════${NC}"
    echo -e "${WHITE}              Advanced Red Team Security Assessment Tool${NC}"
    echo -e "${CYAN}                    Version ${VERSION} | by mpgamer75${NC}"
    echo -e "${GRAY}════════════════════════════════════════════════════════════════${NC}"
}

show_help() {
    cat << "EOF"

USAGE:
    security [OPTIONS]

OPTIONS:
    -h, --help      Show this help message
    -v, --version   Show version information
    -q, --quick     Quick scan mode (faster, less comprehensive)
    -s, --stealth   Stealth mode (slower, evasive techniques)

SCAN TYPES:
    1. OSINT & Information Gathering
       - WHOIS lookups and domain information
       - DNS enumeration (A, MX, NS, TXT records)
       - Email harvesting with multiple sources
       - Subdomain enumeration and certificate transparency
       - Social media and breach data reconnaissance

    2. Network Reconnaissance & Enumeration
       - Adaptive port scanning with progress indicators
       - Service version detection and OS fingerprinting
       - Banner grabbing and service enumeration
       - SMB/NetBIOS enumeration
       - SNMP community string testing

    3. Web Application Security Testing
       - Technology stack identification
       - Directory and file enumeration
       - Vulnerability scanning with Nuclei templates
       - SQL injection and XSS testing
       - SSL/TLS configuration analysis

    4. Advanced Red Team Assessment
       - Complete reconnaissance workflow
       - Stealth scanning techniques
       - Automated vulnerability correlation
       - Attack surface mapping
       - Post-exploitation preparation data

TOOLS INTEGRATED:
    OSINT: whois, theharvester, subfinder, amass, crt.sh
    Network: nmap, masscan, rustscan, enum4linux, smbclient
    Web: whatweb, nikto, gobuster, nuclei, sqlmap, wafw00f
    Exploits: searchsploit, msfconsole integration prep

FEATURES:
    ✓ Real-time progress indicators
    ✓ Graceful interrupt handling (Ctrl+C)
    ✓ Adaptive timeout management
    ✓ Stealth and evasion techniques
    ✓ Comprehensive reporting
    ✓ Red team workflow optimization

EXAMPLES:
    security                    # Interactive mode
    security --quick           # Fast reconnaissance
    security --stealth         # Evasive scanning

EOF
}

# Gestion améliorée des interruptions
handle_interrupt() {
    SCAN_INTERRUPTED=true
    echo -e "\n${YELLOW}[!]${NC} Interruption détectée..."
    
    if [ -n "$CURRENT_SCAN" ]; then
        echo -e "${CYAN}[INFO]${NC} Arrêt en cours de: $CURRENT_SCAN"
        # Tuer les processus en arrière-plan
        jobs -p | xargs -r kill 2>/dev/null || true
    fi
    
    echo -e "${YELLOW}[INFO]${NC} Génération du rapport partiel..."
    generate_clean_report
    echo -e "\n${CYAN}[INFO]${NC} Résultats partiels sauvegardés dans: ${WHITE}$OUTDIR${NC}"
    echo -e "${YELLOW}Scan interrompu par l'utilisateur${NC}"
    exit 130
}

# Progress indicator pour les scans longs
show_progress() {
    local duration=$1
    local message="$2"
    local elapsed=0
    
    echo -ne "${CYAN}[PROGRESS]${NC} $message "
    
    while [ $elapsed -lt $duration ] && [ "$SCAN_INTERRUPTED" = false ]; do
        for i in '/' '-' '\' '|'; do
            echo -ne "\b$i"
            sleep 0.25
            elapsed=$((elapsed + 1))
            [ $elapsed -ge $duration ] && break
            [ "$SCAN_INTERRUPTED" = true ] && break
        done
    done
    echo -e "\b "
}

# Variables globales
declare -A running_processes
declare -A completed_processes
OUTDIR=""
TARGET=""
URL=""
DOMAIN=""
QUICK_MODE=false
STEALTH_MODE=false

install_missing_tool() {
    local tool="$1"
    echo -e "${YELLOW}[INSTALL]${NC} Installation de $tool..."
    
    case "$tool" in
        "subfinder"|"nuclei"|"amass")
            if command -v go &> /dev/null; then
                case "$tool" in
                    "subfinder") go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest ;;
                    "nuclei") go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest ;;
                    "amass") go install -v github.com/OWASP/Amass/v3/...@master ;;
                esac
            else
                echo -e "${RED}[ERROR]${NC} Go requis pour installer $tool"
                return 1
            fi
            ;;
        "rustscan")
            if command -v cargo &> /dev/null; then
                cargo install rustscan
            else
                echo -e "${YELLOW}[INFO]${NC} Installation alternative de rustscan via GitHub releases..."
                wget -q https://github.com/RustScan/RustScan/releases/download/2.0.1/rustscan_2.0.1_amd64.deb
                sudo dpkg -i rustscan_2.0.1_amd64.deb 2>/dev/null || true
                rm -f rustscan_2.0.1_amd64.deb
            fi
            ;;
        *)
            if command -v apt &> /dev/null; then
                sudo apt update && sudo apt install -y "$tool"
            elif command -v yum &> /dev/null; then
                sudo yum install -y "$tool"
            elif command -v pacman &> /dev/null; then
                sudo pacman -S --noconfirm "$tool"
            fi
            ;;
    esac
    
    if command -v "$tool" &> /dev/null; then
        echo -e "${GREEN}[SUCCESS]${NC} $tool installé avec succès"
        return 0
    else
        echo -e "${RED}[ERROR]${NC} Échec de l'installation de $tool"
        return 1
    fi
}

prepare_output() {
    OUTDIR="redteam_assessment_$(date +'%Y%m%d_%H%M%S')"
    mkdir -p "$OUTDIR"/{osint,network,web,vulnerabilities,reports,exploitation}
    echo -e "${GREEN}[INFO]${NC} Répertoire de résultats: ${WHITE}$OUTDIR${NC}"
}

# Fonction améliorée d'exécution avec indicateur de progression
execute_with_progress() {
    local name="$1"
    local command="$2"
    local timeout_duration="${3:-300}"
    local output_file="$4"
    local show_progress="${5:-true}"
    
    CURRENT_SCAN="$name"
    echo -e "${CYAN}[START]${NC} $name"
    
    # Fonction de progression en arrière-plan
    if [ "$show_progress" = true ]; then
        (
            local elapsed=0
            while [ $elapsed -lt $timeout_duration ] && kill -0 $$ 2>/dev/null; do
                printf "\r${YELLOW}[%02d:%02d]${NC} $name en cours..." $((elapsed/60)) $((elapsed%60))
                sleep 5
                elapsed=$((elapsed + 5))
            done
        ) &
        local progress_pid=$!
    fi
    
    # Exécution de la commande
    set +e
    timeout "$timeout_duration" bash -c "$command" > "$output_file" 2>&1 &
    local cmd_pid=$!
    
    # Attendre la fin ou interruption
    while kill -0 $cmd_pid 2>/dev/null && [ "$SCAN_INTERRUPTED" = false ]; do
        sleep 1
    done
    
    # Nettoyer le processus de progression
    if [ "$show_progress" = true ]; then
        kill $progress_pid 2>/dev/null || true
        wait $progress_pid 2>/dev/null || true
        printf "\r${GREEN}[DONE]${NC} %-50s\n" "$name"
    fi
    
    local exit_code=0
    if kill -0 $cmd_pid 2>/dev/null; then
        kill $cmd_pid 2>/dev/null
        wait $cmd_pid 2>/dev/null || true
        if [ "$SCAN_INTERRUPTED" = true ]; then
            echo "SCAN INTERRUPTED BY USER" >> "$output_file"
            exit_code=130
        else
            echo "SCAN TIMEOUT AFTER ${timeout_duration} SECONDS" >> "$output_file"
            exit_code=124
        fi
    else
        wait $cmd_pid
        exit_code=$?
    fi
    
    set -e
    CURRENT_SCAN=""
    
    case $exit_code in
        0) return 0 ;;
        130) return 130 ;;
        *) 
            echo -e "${YELLOW}[WARNING]${NC} $name terminé avec des erreurs (code: $exit_code)"
            return 0 
            ;;
    esac
}

show_scan_menu() {
    echo -e "\n${YELLOW}Sélectionner le type d'évaluation:${NC}"
    echo -e "${CYAN}1)${NC} OSINT & Collecte d'informations"
    echo -e "${CYAN}2)${NC} Reconnaissance réseau & énumération" 
    echo -e "${CYAN}3)${NC} Test de sécurité d'applications web"
    echo -e "${CYAN}4)${NC} Évaluation Red Team complète"
    echo
    
    if [ "$QUICK_MODE" = true ]; then
        echo -e "${YELLOW}[MODE]${NC} Mode rapide activé - scans optimisés pour la vitesse"
    fi
    
    if [ "$STEALTH_MODE" = true ]; then
        echo -e "${YELLOW}[MODE]${NC} Mode furtif activé - techniques d'évasion"
    fi
    echo
}

run_osint_scans() {
    local target="$1"
    local domain="$2"
    
    echo -e "\n${RED}[OSINT]${NC} Démarrage de la collecte d'informations..."
    
    if [ -n "$domain" ]; then
        execute_with_progress "WHOIS Lookup" "whois '$domain'" 60 "$OUTDIR/osint/whois.txt"
        
        # DNS enumeration améliorée
        execute_with_progress "DNS Enumeration" "
            echo '=== A Records ===' 
            dig +short '$domain' A
            echo -e '\n=== MX Records ==='
            dig +short '$domain' MX
            echo -e '\n=== NS Records ==='
            dig +short '$domain' NS
            echo -e '\n=== TXT Records ==='
            dig +short '$domain' TXT
            echo -e '\n=== AAAA Records ==='
            dig +short '$domain' AAAA
            echo -e '\n=== CNAME Records ==='
            dig +short '$domain' CNAME
        " 60 "$OUTDIR/osint/dns_enum.txt"
        
        # Subdomain enumeration avancée
        if command -v subfinder &> /dev/null; then
            execute_with_progress "Subfinder Discovery" "subfinder -d '$domain' -all -recursive" 300 "$OUTDIR/osint/subdomains_subfinder.txt"
        fi
        
        if command -v amass &> /dev/null; then
            local amass_timeout=600
            [ "$QUICK_MODE" = true ] && amass_timeout=300
            execute_with_progress "Amass Enumeration" "amass enum -passive -d '$domain'" $amass_timeout "$OUTDIR/osint/subdomains_amass.txt"
        fi
        
        # Certificate transparency
        execute_with_progress "Certificate Transparency" "
            curl -s 'https://crt.sh/?q=%.$domain&output=json' | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u
        " 60 "$OUTDIR/osint/crt_sh.txt"
        
        # Email harvesting
        if command -v theharvester &> /dev/null; then
            execute_with_progress "Email Harvesting" "theharvester -d '$domain' -l 200 -b google,bing,yahoo,duckduckgo" 300 "$OUTDIR/osint/emails.txt"
        fi
        
        # Google dorking automation
        execute_with_progress "Google Dorking" "
            echo 'site:$domain filetype:pdf'
            echo 'site:$domain filetype:doc'
            echo 'site:$domain filetype:xls'
            echo 'site:$domain inurl:admin'
            echo 'site:$domain inurl:login'
            echo 'site:$domain inurl:config'
            echo 'site:$domain intitle:\"index of\"'
        " 30 "$OUTDIR/osint/google_dorks.txt"
    fi
    
    if [ -n "$target" ]; then
        execute_with_progress "Reverse DNS" "dig +short -x '$target'" 30 "$OUTDIR/osint/reverse_dns.txt"
        execute_with_progress "IP Geolocation" "curl -s 'http://ip-api.com/json/$target'" 30 "$OUTDIR/osint/geolocation.txt"
    fi
    
    echo -e "${GREEN}[COMPLETED]${NC} Collecte OSINT terminée"
}

run_network_scans() {
    local target="$1"
    
    echo -e "\n${RED}[NETWORK]${NC} Démarrage de la reconnaissance réseau..."
    
    # Host discovery amélioré
    execute_with_progress "Host Discovery" "nmap -sn -PE -PP -PS21,22,23,25,53,80,113,443,993,995 '$target'" 60 "$OUTDIR/network/host_discovery.txt"
    
    # Port scanning adaptatif selon le mode
    if [ "$QUICK_MODE" = true ]; then
        # Mode rapide - top 1000 ports seulement
        execute_with_progress "Quick Port Scan" "nmap -T5 --top-ports 1000 --min-rate=5000 '$target'" 180 "$OUTDIR/network/nmap_quick.txt"
        
        # Rustscan si disponible (plus rapide)
        if command -v rustscan &> /dev/null; then
            execute_with_progress "RustScan Ultra-Fast" "rustscan -a '$target' --top" 120 "$OUTDIR/network/rustscan.txt"
        fi
    elif [ "$STEALTH_MODE" = true ]; then
        # Mode furtif - scans lents et évasifs
        execute_with_progress "Stealth SYN Scan" "nmap -sS -T2 -f --mtu 24 --scan-delay 5s --top-ports 1000 '$target'" 1800 "$OUTDIR/network/nmap_stealth.txt"
        execute_with_progress "Decoy Scan" "nmap -sS -T2 -D RND:10 --top-ports 500 '$target'" 1200 "$OUTDIR/network/nmap_decoy.txt"
    else

        # Mode standard optimisé - REMPLACE le scan TCP complet problématique
        execute_with_progress "Standard Port Scan" "nmap -sS -T4 --top-ports 3000 --min-rate=1000 '$target'" 600 "$OUTDIR/network/nmap_standard.txt"
        
        # Service detection sur les ports ouverts seulement
        execute_with_progress "Service Detection" "nmap -sV -sC --version-intensity 5 --top-ports 1000 '$target'" 900 "$OUTDIR/network/nmap_services.txt"
    fi
    
    # UDP scan critique seulement (optimisé)
    execute_with_progress "UDP Critical Ports" "nmap -sU --top-ports 20 '$target'" 300 "$OUTDIR/network/nmap_udp_critical.txt"
    
    # OS detection léger
    execute_with_progress "OS Fingerprinting" "nmap -O --osscan-guess --max-os-tries 2 '$target'" 180 "$OUTDIR/network/nmap_os.txt"
    
    # Scripts de vulnérabilités ciblés
    execute_with_progress "Vulnerability Scripts" "nmap --script vuln,safe --top-ports 1000 '$target'" 600 "$OUTDIR/network/nmap_vulns.txt"
    
    # SMB enumeration si applicable
    execute_with_progress "SMB Enumeration" "
        nmap -p 445 --script smb-enum-shares,smb-enum-users,smb-os-discovery '$target'
        enum4linux -a '$target' 2>/dev/null || echo 'enum4linux not available'
    " 300 "$OUTDIR/network/smb_enum.txt"
    
    # SNMP enumeration
    execute_with_progress "SNMP Enumeration" "nmap -sU -p 161 --script snmp-sysdescr,snmp-processes,snmp-netstat '$target'" 180 "$OUTDIR/network/snmp_enum.txt"
    
    echo -e "${GREEN}[COMPLETED]${NC} Reconnaissance réseau terminée"
}

run_web_scans() {
    local url="$1"
    
    echo -e "\n${RED}[WEB]${NC} Démarrage des tests d'applications web..."
    
    # Technology detection améliorée
    if command -v whatweb &> /dev/null; then
        execute_with_progress "Technology Detection" "whatweb '$url' -a 3 -v" 120 "$OUTDIR/web/whatweb.txt"
    fi
    
    # WAF detection
    if command -v wafw00f &> /dev/null; then
        execute_with_progress "WAF Detection" "wafw00f '$url'" 60 "$OUTDIR/web/wafw00f.txt"
    fi
    
    # SSL/TLS analysis
    execute_with_progress "SSL/TLS Analysis" "
        echo '=== SSL Certificate Info ==='
        echo | openssl s_client -connect '$(echo $url | sed 's|https\\?://||'):443' -servername '$(echo $url | sed 's|https\\?://||')' 2>/dev/null | openssl x509 -text
        echo -e '\n=== SSL Configuration ==='
        nmap --script ssl-enum-ciphers -p 443 '$(echo $url | sed 's|https\\?://||')'
    " 180 "$OUTDIR/web/ssl_analysis.txt"
    
    # Directory enumeration optimisée
    local wordlist_dir="/usr/share/wordlists/dirb"
    [ ! -d "$wordlist_dir" ] && wordlist_dir="$HOME/.local/share/wordlists/dirb"
    
    if command -v gobuster &> /dev/null && [ -f "$wordlist_dir/common.txt" ]; then
        if [ "$QUICK_MODE" = true ]; then
            execute_with_progress "Quick Directory Enum" "gobuster dir -u '$url' -w '$wordlist_dir/common.txt' -t 30 -x php,html,txt" 300 "$OUTDIR/web/gobuster_quick.txt"
        else
            execute_with_progress "Directory Enumeration" "gobuster dir -u '$url' -w '$wordlist_dir/common.txt' -t 50 -x php,html,txt,js,css,json" 600 "$OUTDIR/web/gobuster_common.txt"
            execute_with_progress "Extended Directory Enum" "gobuster dir -u '$url' -w '$wordlist_dir/big.txt' -t 30 -x php,html" 900 "$OUTDIR/web/gobuster_extended.txt"
        fi
    fi
    
    # Nuclei vulnerability scanning
    if command -v nuclei &> /dev/null; then
        if [ "$QUICK_MODE" = true ]; then
            execute_with_progress "Quick Vulnerability Scan" "nuclei -u '$url' -t /root/nuclei-templates/cves/ -t /root/nuclei-templates/exposures/" 300 "$OUTDIR/web/nuclei_quick.txt"
        else
            execute_with_progress "Comprehensive Vuln Scan" "nuclei -u '$url' -severity critical,high,medium" 900 "$OUTDIR/web/nuclei_comprehensive.txt"
        fi
    fi
    
    # Nikto scan
    if command -v nikto &> /dev/null; then
        local nikto_timeout=600
        [ "$QUICK_MODE" = true ] && nikto_timeout=300
        execute_with_progress "Nikto Web Scan" "nikto -h '$url' -C all" $nikto_timeout "$OUTDIR/web/nikto.txt"
    fi
    
    # SQL injection testing
    if command -v sqlmap &> /dev/null; then
        mkdir -p "$OUTDIR/web/sqlmap"
        execute_with_progress "SQL Injection Testing" "sqlmap -u '$url' --batch --level=2 --risk=2 --output-dir='$OUTDIR/web/sqlmap' --threads=5" 600 "$OUTDIR/web/sqlmap/sqlmap.log"
    fi
    
    # XSS testing avec diverses techniques
    execute_with_progress "XSS Detection" "
        echo '=== Basic XSS Payloads ==='
        echo '<script>alert(1)</script>'
        echo '\"><script>alert(1)</script>'
        echo 'javascript:alert(1)'
        echo '=== Advanced XSS Payloads ==='
        echo '<img src=x onerror=alert(1)>'
        echo '<svg onload=alert(1)>'
        echo '\';alert(1);//'
    " 30 "$OUTDIR/web/xss_payloads.txt"
    
    echo -e "${GREEN}[COMPLETED]${NC} Tests d'applications web terminés"
}

run_exploitation_prep() {
    local target="$1"
    
    echo -e "\n${RED}[EXPLOIT]${NC} Préparation à l'exploitation..."
    
    # Searchsploit integration
    if command -v searchsploit &> /dev/null; then
        execute_with_progress "Exploit Database Search" "
            # Recherche par services détectés
            if [ -f '$OUTDIR/network/nmap_services.txt' ]; then
                grep -oP '\\d+/tcp\\s+open\\s+\\K[^\\s]+' '$OUTDIR/network/nmap_services.txt' 2>/dev/null | while read service; do
                    echo \"=== Exploits pour \$service ===\"
                    searchsploit \"\$service\" 2>/dev/null | head -10 || echo \"Aucun exploit trouvé pour \$service\"
                done
            else
                echo \"Fichier de services non trouvé\"
            fi
        " 300 "$OUTDIR/exploitation/searchsploit.txt"
    fi
    
    # MSF module suggestions
    execute_with_progress "Metasploit Module Prep" "
        echo '=== Suggested MSF Modules Based on Scan Results ==='
        echo 'use auxiliary/scanner/portscan/tcp'
        echo 'use auxiliary/scanner/smb/smb_version'
        echo 'use auxiliary/scanner/http/http_version'
        echo 'use auxiliary/scanner/ssh/ssh_version'
        echo '=== Exploitation Commands ==='
        echo 'search type:exploit platform:linux'
        echo 'search type:exploit platform:windows'
    " 30 "$OUTDIR/exploitation/msf_prep.txt"
    
    # Common attack vectors summary
    execute_with_progress "Attack Surface Analysis" "
        echo '=== Attack Surface Summary ==='
        echo 'Open Ports:'
        if [ -f '$OUTDIR/network/nmap_standard.txt' ]; then
            grep 'open' '$OUTDIR/network/nmap_standard.txt' | head -10
        fi
        echo -e '\nWeb Technologies:'
        if [ -f '$OUTDIR/web/whatweb.txt' ]; then
            grep -i 'Title\\|Server\\|Framework' '$OUTDIR/web/whatweb.txt' | head -5
        fi
        echo -e '\nPotential Entry Points:'
        echo '- Check for default credentials'
        echo '- Test for weak SSL/TLS configurations'
        echo '- Analyze web application for OWASP Top 10'
        echo '- SMB null sessions if applicable'
        echo '- SNMP default communities'
    " 60 "$OUTDIR/exploitation/attack_surface.txt"
    
    echo -e "${GREEN}[COMPLETED]${NC} Préparation à l'exploitation terminée"
}

generate_clean_report() {
    local report_file="$OUTDIR/reports/executive_summary.txt"
    
    echo -e "${CYAN}[INFO]${NC} Génération du rapport de synthèse..."
    
    {
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║                       RED TEAM ASSESSMENT REPORT                            ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        echo
        echo "┌─ TARGET INFORMATION ─────────────────────────────────────────────────────────┐"
        echo "│  Target IP: $TARGET"
        [ -n "$URL" ] && echo "│  Target URL: $URL"
        [ -n "$DOMAIN" ] && echo "│  Domain: $DOMAIN"
        echo "│  Assessment Date: $(date)"
        echo "│  Tool Version: Security Scanner $VERSION"
        [ "$QUICK_MODE" = true ] && echo "│  Mode: Quick Scan"
        [ "$STEALTH_MODE" = true ] && echo "│  Mode: Stealth Scan"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "┌─ EXECUTIVE SUMMARY ───────────────────────────────────────────────────────────┐"
        local critical_findings=0
        local high_findings=0
        local medium_findings=0
        
        # Compter les découvertes critiques
        if [ -f "$OUTDIR/network/nmap_vulns.txt" ]; then
            critical_findings=$(grep -c "VULNERABLE\|CRITICAL" "$OUTDIR/network/nmap_vulns.txt" 2>/dev/null || echo "0")
        fi
        
        if [ -f "$OUTDIR/web/nuclei_comprehensive.txt" ]; then
            high_findings=$(grep -c "high\|critical" "$OUTDIR/web/nuclei_comprehensive.txt" 2>/dev/null || echo "0")
        fi
        
        echo "│  Critical Vulnerabilities: $critical_findings"
        echo "│  High Risk Issues: $high_findings"
        echo "│  Medium Risk Issues: $medium_findings"
        
        # Résumé des services exposés
        if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
            local open_ports=$(grep -c "open" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null || echo "0")
            echo "│  Exposed Services: $open_ports"
        fi
        
        # Résumé des sous-domaines
        if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
            local subdomain_count=$(wc -l < "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null || echo "0")
            echo "│  Subdomains Discovered: $subdomain_count"
        fi
        
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        # Analyse détaillée des résultats
        if [ -d "$OUTDIR/osint" ] && [ "$(ls -A "$OUTDIR/osint" 2>/dev/null)" ]; then
            echo "┌─ OSINT & RECONNAISSANCE ──────────────────────────────────────────────────────┐"
            echo "│  Information Gathering Results:"
            
            # Top subdomains
            if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
                echo "│  Key Subdomains Found:"
                head -5 "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null | while read subdomain; do
                    echo "│    • $subdomain"
                done
            fi
            
            # Email addresses
            if [ -f "$OUTDIR/osint/emails.txt" ]; then
                local email_count=$(grep -c "@" "$OUTDIR/osint/emails.txt" 2>/dev/null || echo "0")
                echo "│  Email Addresses Found: $email_count"
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        if [ -d "$OUTDIR/network" ] && [ "$(ls -A "$OUTDIR/network" 2>/dev/null)" ]; then
            echo "┌─ NETWORK SECURITY ANALYSIS ───────────────────────────────────────────────────┐"
            echo "│  Network Attack Surface:"
            
            # Services critiques exposés
            if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
                echo "│  Critical Services Exposed:"
                grep -E "22/tcp|21/tcp|23/tcp|25/tcp|53/tcp|80/tcp|443/tcp|445/tcp|993/tcp|995/tcp|3389/tcp" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null | grep "open" | while read line; do
                    echo "│    • $line"
                done
            fi
            
            # Vulnérabilités réseau
            if [ -f "$OUTDIR/network/nmap_vulns.txt" ]; then
                echo "│  Network Vulnerabilities:"
                grep "VULNERABLE" "$OUTDIR/network/nmap_vulns.txt" 2>/dev/null | head -3 | while read vuln; do
                    echo "│    ⚠ $vuln"
                done
            fi
            
            # OS Detection
            if [ -f "$OUTDIR/network/nmap_os.txt" ]; then
                echo "│  Operating System:"
                grep "OS:" "$OUTDIR/network/nmap_os.txt" 2>/dev/null | head -1 | while read os; do
                    echo "│    • $os"
                done
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        if [ -d "$OUTDIR/web" ] && [ "$(ls -A "$OUTDIR/web" 2>/dev/null)" ]; then
            echo "┌─ WEB APPLICATION SECURITY ────────────────────────────────────────────────────┐"
            echo "│  Web Security Assessment:"
            
            # Technologies détectées
            if [ -f "$OUTDIR/web/whatweb.txt" ]; then
                echo "│  Web Technologies:"
                grep -oP "\\[\\K[^\\]]+" "$OUTDIR/web/whatweb.txt" 2>/dev/null | head -5 | while read tech; do
                    echo "│    • $tech"
                done
            fi
            
            # WAF Detection
            if [ -f "$OUTDIR/web/wafw00f.txt" ]; then
                echo "│  WAF Status:"
                if grep -q "No WAF detected" "$OUTDIR/web/wafw00f.txt" 2>/dev/null; then
                    echo "│    • No Web Application Firewall detected"
                else
                    grep "is behind" "$OUTDIR/web/wafw00f.txt" 2>/dev/null | while read waf; do
                        echo "│    • $waf"
                    done
                fi
            fi
            
            # Répertoires sensibles
            if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
                echo "│  Sensitive Directories:"
                grep -E "/admin|/login|/config|/backup|/test|/dev" "$OUTDIR/web/gobuster_common.txt" 2>/dev/null | head -5 | while read dir; do
                    echo "│    • $dir"
                done
            fi
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        # Section Red Team spécifique
        if [ -d "$OUTDIR/exploitation" ] && [ "$(ls -A "$OUTDIR/exploitation" 2>/dev/null)" ]; then
            echo "┌─ RED TEAM ATTACK VECTORS ─────────────────────────────────────────────────────┐"
            echo "│  Potential Attack Paths:"
            
            # Entry points
            echo "│  Primary Entry Points:"
            echo "│    • Web Application (if HTTP/HTTPS exposed)"
            echo "│    • SSH Brute Force (if port 22 open)"
            echo "│    • SMB Exploitation (if port 445 open)"
            echo "│    • Email Phishing (based on harvested emails)"
            
            # Privilege escalation paths
            echo "│  Privilege Escalation Opportunities:"
            echo "│    • Service Version Exploits"
            echo "│    • Kernel Exploits (based on OS detection)"
            echo "│    • Misconfigured Services"
            
            echo "└──────────────────────────────────────────────────────────────────────────────┘"
            echo
        fi
        
        echo "┌─ RECOMMENDATIONS ─────────────────────────────────────────────────────────────┐"
        echo "│  Immediate Actions Required:"
        echo "│    1. Patch all identified vulnerabilities"
        echo "│    2. Implement proper access controls"
        echo "│    3. Configure Web Application Firewall"
        echo "│    4. Enable monitoring and logging"
        echo "│    5. Conduct security awareness training"
        echo "│"
        echo "│  Red Team Perspective:"
        echo "│    • Focus on exposed web applications first"
        echo "│    • Test default credentials on all services"
        echo "│    • Attempt subdomain takeover if applicable"
        echo "│    • Social engineering via harvested emails"
        echo "│    • Network lateral movement preparation"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "┌─ SCAN STATISTICS ─────────────────────────────────────────────────────────────┐"
        local total_files=$(find "$OUTDIR" -type f 2>/dev/null | wc -l)
        local total_size=$(du -sh "$OUTDIR" 2>/dev/null | cut -f1 || echo "Unknown")
        echo "│  Files Generated: $total_files"
        echo "│  Data Collected: $total_size"
        echo "│  Assessment Completed: $(date)"
        echo "│  Next Steps: Review detailed logs in subdirectories"
        echo "└──────────────────────────────────────────────────────────────────────────────┘"
        echo
        
        echo "╔══════════════════════════════════════════════════════════════════════════════╗"
        echo "║              Red Team Security Scanner v$VERSION - Assessment Complete              ║"
        echo "╚══════════════════════════════════════════════════════════════════════════════╝"
        
    } > "$report_file"
    
    # Générer aussi un rapport JSON pour l'automatisation
    generate_json_report
    
    echo -e "${GREEN}[REPORT]${NC} Rapport de synthèse: ${WHITE}$report_file${NC}"
}

generate_json_report() {
    local json_file="$OUTDIR/reports/assessment_results.json"
    
    {
        echo "{"
        echo "  \"assessment\": {"
        echo "    \"target\": \"$TARGET\","
        echo "    \"url\": \"$URL\","
        echo "    \"domain\": \"$DOMAIN\","
        echo "    \"date\": \"$(date -Iseconds)\","
        echo "    \"version\": \"$VERSION\","
        echo "    \"mode\": \"$([ "$QUICK_MODE" = true ] && echo "quick" || ([ "$STEALTH_MODE" = true ] && echo "stealth" || echo "standard"))\""
        echo "  },"
        echo "  \"results\": {"
        
        # OSINT results
        echo "    \"osint\": {"
        if [ -f "$OUTDIR/osint/subdomains_subfinder.txt" ]; then
            local subdomain_count=$(wc -l < "$OUTDIR/osint/subdomains_subfinder.txt" 2>/dev/null || echo "0")
            echo "      \"subdomains_found\": $subdomain_count,"
        fi
        
        if [ -f "$OUTDIR/osint/emails.txt" ]; then
            local email_count=$(grep -c "@" "$OUTDIR/osint/emails.txt" 2>/dev/null || echo "0")
            echo "      \"emails_found\": $email_count,"
        fi
        echo "      \"completed\": true"
        echo "    },"
        
        # Network results
        echo "    \"network\": {"
        if [ -f "$OUTDIR/network/nmap_standard.txt" ]; then
            local open_ports=$(grep -c "open" "$OUTDIR/network/nmap_standard.txt" 2>/dev/null || echo "0")
            echo "      \"open_ports\": $open_ports,"
        fi
        
        if [ -f "$OUTDIR/network/nmap_vulns.txt" ]; then
            local vulns=$(grep -c "VULNERABLE" "$OUTDIR/network/nmap_vulns.txt" 2>/dev/null || echo "0")
            echo "      \"vulnerabilities\": $vulns,"
        fi
        echo "      \"completed\": true"
        echo "    },"
        
        # Web results
        echo "    \"web\": {"
        if [ -f "$OUTDIR/web/gobuster_common.txt" ]; then
            local dirs_found=$(wc -l < "$OUTDIR/web/gobuster_common.txt" 2>/dev/null || echo "0")
            echo "      \"directories_found\": $dirs_found,"
        fi
        echo "      \"completed\": true"
        echo "    }"
        
        echo "  },"
        echo "  \"metadata\": {"
        echo "    \"scan_duration\": \"$(date)\","
        echo "    \"output_directory\": \"$OUTDIR\","
        echo "    \"total_files\": $(find "$OUTDIR" -type f 2>/dev/null | wc -l)"
        echo "  }"
        echo "}"
        
    } > "$json_file"
}

main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                echo "Security Scanner v$VERSION"
                exit 0
                ;;
            -q|--quick)
                QUICK_MODE=true
                shift
                ;;
            -s|--stealth)
                STEALTH_MODE=true
                shift
                ;;
            *)
                echo "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Configuration du trap pour les interruptions
    trap 'handle_interrupt' SIGINT SIGTERM
    
    display_banner
    
    # Get target information
    echo -e "\n${YELLOW}Informations sur la cible:${NC}"
    read -rp "Adresse IP de la cible: " TARGET
    [ -z "$TARGET" ] && { echo -e "${RED}[ERROR]${NC} Aucune IP fournie"; exit 1; }
    
    read -rp "URL de la cible (optionnel): " URL
    read -rp "Nom de domaine (optionnel): " DOMAIN
    
    # Extract domain from URL if not provided
    if [ -n "$URL" ] && [ -z "$DOMAIN" ]; then
        DOMAIN=$(echo "$URL" | sed -E 's|https?://([^/]+).*|\1|')
    fi
    
    show_scan_menu
    read -rp "Sélectionner l'option [1-4]: " SCAN_CHOICE
    
    prepare_output
    
    echo -e "\n${CYAN}[INFO]${NC} Démarrage de l'évaluation de sécurité..."
    echo -e "${YELLOW}[TIP]${NC} Utilisez Ctrl+C pour arrêter gracieusement le scan"
    
    case "$SCAN_CHOICE" in
        1)
            run_osint_scans "$TARGET" "$DOMAIN"
            ;;
        2)
            run_network_scans "$TARGET"
            ;;
        3)
            if [ -z "$URL" ]; then
                echo -e "${RED}[ERROR]${NC} URL requise pour les tests web"
                exit 1
            fi
            run_web_scans "$URL"
            ;;
        4)
            echo -e "${CYAN}[INFO]${NC} Évaluation Red Team complète en cours..."
            run_osint_scans "$TARGET" "$DOMAIN"
            [ "$SCAN_INTERRUPTED" = false ] && run_network_scans "$TARGET"
            [ "$SCAN_INTERRUPTED" = false ] && [ -n "$URL" ] && run_web_scans "$URL"
            [ "$SCAN_INTERRUPTED" = false ] && run_exploitation_prep "$TARGET"
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Sélection invalide"
            exit 1
            ;;
    esac
    
    # Vérifier si le scan a été interrompu
    if [ "$SCAN_INTERRUPTED" = true ]; then
        exit 130
    fi
    
    # Génération du rapport final
    generate_clean_report
    
    echo -e "\n${GREEN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                         RED TEAM ASSESSMENT COMPLETED                       ║${NC}"
    echo -e "${GREEN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo -e "${WHITE}Résultats sauvegardés dans:${NC} ${CYAN}$OUTDIR${NC}"
    echo -e "${WHITE}Rapport de synthèse:${NC} ${CYAN}$OUTDIR/reports/executive_summary.txt${NC}"
    echo -e "${WHITE}Rapport JSON:${NC} ${CYAN}$OUTDIR/reports/assessment_results.json${NC}"
    echo
    echo -e "${CYAN}[TIP]${NC} Consultez le rapport: ${WHITE}cat $OUTDIR/reports/executive_summary.txt${NC}"
    echo -e "${CYAN}[TIP]${NC} Explorez les résultats: ${WHITE}ls -la $OUTDIR/network/${NC}"
    echo -e "${CYAN}[TIP]${NC} Import MSF: ${WHITE}msfconsole -r $OUTDIR/exploitation/msf_prep.txt${NC}"
    echo -e "\n${YELLOW}Red Team Assessment terminé! Bonne chance pour la suite.${NC}"
}

# Execute main function
main "$@"